# Verbs list.
verbs:
    {
        # Portuguese.
        # Spanish (with _ after is the same as Portuguese).
        # English (with __ after is the same as Portuguese).
        Abrir: {Language: Portuguese, Function: Lib.Func.Main.open_new_tab},
        Abrir_: {Language: Spanish, Function: Lib.Func.Main.open_new_tab},
        Open: {Language: English, Function: Lib.Func.Main.open_new_tab},

        Acessar: {Language: Portuguese, Function: Lib.Func.Main.open_page},
        Acceder: {Language: Spanish, Function: Lib.Func.Main.open_page},
        Access: {Language: English, Function: Lib.Func.Main.open_page},

        Aguardar: {Language: Portuguese, Function: Lib.Func.Main.wait},
        Esperar: {Language: Spanish, Function: Lib.Func.Main.wait},
        Wait: {Language: English, Function: Lib.Func.Main.wait},

        Alterar: {Language: Portuguese, Function: Lib.Func.Main.alter},
        Alternar: {Language: Portuguese, Function: Lib.Func.Main.alter},
        Cambiar: {Language: Spanish, Function: Lib.Func.Main.alter},
        Switch: {Language: English, Function: Lib.Func.Main.alter},

        Arrastar: {Language: Portuguese, Function: Lib.Func.Main.drag_drop},
        Arrastar_: {Language: Spanish, Function: Lib.Func.Main.drag_drop},
        Drag: {Language: English, Function: Lib.Func.Main.drag_drop},

        Atualizar: {Language: Portuguese, Function: Lib.Func.Main.refresh_page},
        Actualizar: {Language: Spanish, Function: Lib.Func.Main.refresh_page},
        Refresh: {Language: English, Function: Lib.Func.Main.refresh_page},

        Avançar: {Language: Portuguese, Function: Lib.Func.Main.forward_page},
        Avanzar: {Language: Spanish, Function: Lib.Func.Main.forward_page},
        Forward: {Language: English, Function: Lib.Func.Main.forward_page},

        Clicar: {Language: Portuguese, Function: Lib.Func.Main.click},
        Clicar_: {Language: Spanish, Function: Lib.Func.Main.click},
        Click: {Language: English, Function: Lib.Func.Main.click},

        Delete: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Delete_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Delete__: {Language: English, Function: Lib.Func.Main.request_api},

        Duplo: {Language: Portuguese, Function: Lib.Func.Main.double_click},
        DobleClic: {Language: Spanish, Function: Lib.Func.Main.double_click},
        Double: {Language: English, Function: Lib.Func.Main.double_click},

        Execute: {Language: Portuguese, Function: Lib.Func.Main.execute},
        Ejecute: {Language: Spanish, Function: Lib.Func.Main.execute},
        Execute_: {Language: English, Function: Lib.Func.Main.execute},

        Fechar: {Language: Portuguese, Function: Lib.Func.Main.close},
        Cerrar: {Language: Spanish, Function: Lib.Func.Main.close},
        Close: {Language: English, Function: Lib.Func.Main.close},

        Get: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Get_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Get__: {Language: English, Function: Lib.Func.Main.request_api},

        Informar: {Language: Portuguese, Function: Lib.Func.Main.inform},
        Informar_: {Language: Spanish, Function: Lib.Func.Main.inform},
        Inform: {Language: English, Function: Lib.Func.Main.inform},

        Mover: {Language: Portuguese, Function: Lib.Func.Main.mouse_over},
        Mover_: {Language: Spanish, Function: Lib.Func.Main.mouse_over},
        Move: {Language: English, Function: Lib.Func.Main.mouse_over},

        Navegar: {Language: Portuguese, Function: Lib.Func.Main.open_browser},
        Navegar_: {Language: Spanish, Function: Lib.Func.Main.open_browser},
        Navegate: {Language: English, Function: Lib.Func.Main.open_browser},

        NoExecute: {Language: Portuguese, Function: Lib.Func.Main.no_execute},
        NoExecute_: {Language: Spanish, Function: Lib.Func.Main.no_execute},
        NoExecute__: {Language: English, Function: Lib.Func.Main.no_execute},

        Post: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Post_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Post__: {Language: English, Function: Lib.Func.Main.request_api},

        Put: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Put_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Put__: {Language: English, Function: Lib.Func.Main.request_api},

        Preencher: {Language: Portuguese, Function: Lib.Func.Main.fill_field},
        Llenar: {Language: Spanish, Function: Lib.Func.Main.fill_field},
        Fill: {Language: English, Function: Lib.Func.Main.fill_field},

        Pressionar: {Language: Portuguese, Function: Lib.Func.Main.right_click},
        Presionar: {Language: Spanish, Function: Lib.Func.Main.right_click},
        Press: {Language: English, Function: Lib.Func.Main.right_click},

        Response: {Language: Portuguese, Function: Lib.Func.Main.response_api},
        Response_: {Language: Spanish, Function: Lib.Func.Main.response_api},
        Response__: {Language: English, Function: Lib.Func.Main.response_api},

        Retornar: {Language: Portuguese, Function: Lib.Func.Main.return_default},
        Retornar_: {Language: Spanish, Function: Lib.Func.Main.return_default},
        Return: {Language: English, Function: Lib.Func.Main.return_default},

        Rolar: {Language: Portuguese, Function: Lib.Func.Main.scroll_page},
        Desplazar: {Language: Spanish, Function: Lib.Func.Main.scroll_page},
        Scroll: {Language: English, Function: Lib.Func.Main.scroll_page},

        Salvar: {Language: Portuguese, Function: Lib.Func.Main.save_file},
        Guardar: {Language: Spanish, Function: Lib.Func.Main.save_file},
        Save: {Language: English, Function: Lib.Func.Main.save_file},

        Segurar: {Language: Portuguese, Function: Lib.Func.Main.drag_drop_to_element},
        Sostener: {Language: Spanish, Function: Lib.Func.Main.drag_drop_to_element},
        Hold: {Language: English, Function: Lib.Func.Main.drag_drop_to_element},

        Selecionar: {Language: Portuguese, Function: Lib.Func.Main.select_drop_down_list},
        Selecionar_: {Language: Spanish, Function: Lib.Func.Main.select_drop_down_list},
        Select: {Language: English, Function: Lib.Func.Main.select_drop_down_list},

        Teclar: {Language: Portuguese, Function: Lib.Func.Main.press_button},
        Teclar_: {Language: Spanish, Function: Lib.Func.Main.press_button},
        Type: {Language: English, Function: Lib.Func.Main.press_button},

        Validar: {Language: Portuguese, Function: Lib.Func.Main.validate_data},
        Validar_: {Language: Spanish, Function: Lib.Func.Main.validate_data},
        Validate: {Language: English, Function: Lib.Func.Main.validate_data},

        Voltar: {Language: Portuguese, Function: Lib.Func.Main.back_page},
        Retroceder: {Language: Spanish, Function: Lib.Func.Main.back_page},
        Back: {Language: English, Function: Lib.Func.Main.back_page}
    }

#List to search the elements attributes to the get_text (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForAttribute:
    {
        searchByID: id,
        searchByNome: name,
        searchByClass: class,
        searchByHREF: a,
        searchBySize: size
    }
#List to search the elements to the get_text (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForComponent:
    {
        searchByDiv: div,
        searchByTD: td,
        searchByTR: tr,
        searchBySpan: span
    }

#List of logs.
logs:
    {
        AlterIframe: {Type: Success, Msg: O foco foi alterado para o IFRAME., Where: automationFunc - alter_frame},
        AlterWindow: {Type: Success, Msg: O foco da tela foi alterado., Where: automationFunc - alter_window},
        ApiLog: {Type: Log, Msg: Ação da API, Where: automationFunc - request_api},
        BackPage: {Type: Success, Msg: Sucesso ao voltar a página., Where: automationFunc - back_page},
        CheckDownloadFile: {Type: Success, Msg: Verifica se o arquivo "Baseline" e "New" já estão no Workitem!, Where: check_download_file},
        Click: {Type: Success, Msg: Clique realizado com sucesso., Where: automationFunc - click},
        ConvertPDF: {Type: Success, Msg: O EST para PDF foi criado., Where: automationCore - start_automation},
        CloseBrowser: {Type: Success, Msg: O browser foi fechado com sucesso., Where: automationFunc - close},
        CloseWindow: {Type: Success, Msg: A janela foi fechada com sucesso., Where: automationFunc - close},
        CompareFile: {Type: Success, Msg: O arquivo foi comparado com sucesso., Where: compare_beyond_compare}, ###
        DeleteDownloadFile: {Type: Success, Msg: O arquivo baixado foi deletado com sucesso., Where: delete_download_file}, ###
        DeleteFile: {Type: Log, Msg: Excluído o arquivo , Where: automationAux - create_directory},
        DeleteFolder: {Type: Log, Msg: Excluído o diretório , Where: automationAux - create_directory},
        DoubleClick: {Type: Success, Msg: Duplo clique realizado com sucesso., Where: double_click},
        DownloadPackageCompleted: {Type: Log, Msg: Download do pacote realizado com sucesso., Where: automationAux - check_new_version},
        DownloadUpdateCompletedMsg: {Type: Log, Msg: OK, Where: AppAutomation}, ###
        DownloadUpdateCompletedTitle: {Type: Log, Msg: Download realizado com sucesso., Where: AppAutomation}, ###
        DragDrop: {Type: Success, Msg: O componente foi arrastado com sucesso., Where: automationFunc - drag_drop},
        DragDropToElement: {Type: Success, Msg: Foi possível segurar e arrastar o componente até outro componente com sucesso., Where: drag_drop_to_element},
        ErrorAddLog: {Type: Error, Msg: Erro na geração do Log!, Where: automationAux - add_log},
        ErrorAddJsonVariation: {Type: Error, Msg: Erro na atualização do log!, Where: automationAux - add_variations},
        ErrorAlter: {Type: Error, Msg: Não foi possível alterar o foco, Where: automationFunc - alter},
        ErrorAlterIframe: {Type: Error, Msg: O foco não foi alterado para o IFRAME, Where: automationFunc - alter_frame},
        ErrorAlterWindow: {Type: Error, Msg: O foco não foi alterado de tela!, Where: automationFunc - alter_window},
        ErrorAttachmentList: {Type: Error, Msg: Erro ao ler o anexo do caso de teste manual!, Where: attachment_list},
        ErrorApiBodyMissing: {Type: Error, Msg: Está faltando o body na API, Where: automationFunc - request_api},
        ErrorApiCheck: {Type: Error, Msg: Erro na validação do schema!, Where: automationAux - api_check},
        ErrorApiMissingBody: { Type: Error, Msg: Nenhum body foi informado. Necessário para testar o schema!, Where: automationFunc - request_api },
        ErrorApiMissingInfo: { Type: Error, Msg: Erro ao executar a API!, Where: automationFunc - requestAPI },
        ErrorApiSchema: {Type: Error, Msg: "O passo com SCHEMA deve se o último passo do caso de teste", Where: automationFunc - request_api},
        ErrorBackPage: {Type: Error, Msg: Falha ao voltar a página!, Where: automationFunc - back_page},
        ErrorCheckDownloadFile: {Type: Error, Msg: Erro ao verificar se arquivo de download já está no Workitem!, Where: check_download_file},
        ErrorCheckNewVersion:{Type: Error, Msg: Erro ao atualizar a nova versão, Where: automationAux - check_new_version},
        ErrorClick: {Type: Error, Msg: Erro ao clicar no elemento!, Where: automationFunc - click},
        ErrorClose: {Type: Error, Msg: Erro ao fechar! Se desejar fechar o browser inclua o primeiro parâmetro no passo., Where: automationFunc - close},
        ErrorConfigureLanguage: {Type: Error, Msg: Ocorreu um erro na configuração do idioma!, Where: configureLanguage},
        ErrorConnection: {Type: Error, Msg: Não se trata de falha na automação. O GitLab não está respondendo. Verifique a sua conexão e tente novamente mais tarde!, Where: connections},
        ErrorConvertPDF: {Type: Error, Msg: Não foi possível converter o ETS para PDF!, Where: automationCore},
        ErrorCompareFile: {Type: Error, Msg: Não foi possível abrir o Beyond Compare!, Where: compare_beyond_compare}, ###
        ErrorCore: {Type: Error, Msg: Ocorreu um erro na aplicação!, Where: main_function},
        ErrorCreateDirectory: {Type: Error, Msg: Ocorreu um erro na criação do diretório!, Where: automationAux - create_directory},
        ErrorCreateLog: {Type: Error, Msg: Erro na criação do log!, Where: createlog},
        ErrorDeleteDirectory: {Type: Error, Msg: Ocorreu um erro ao excluir o diretório!, Where: deleteDirectory},
        ErrorDeleteDownloadFile: {Type: Error, Msg: Erro ao deletar o arquivo baixado!, Where: delete_download_file},
        ErrorDeleteFiles: {Type: Error, Msg: Erro ao deletar os arquivos!, Where: automationAux - deleteFiles},
        ErrorDoubleClick: {Type: Error, Msg: Erro no duplo clique no elemento!, Where: double_click},
        ErrorDownloadUpdate: {Type: Error, Msg: Falha ao realizar o download., Where: automationAux - check_new_version},
        ErrorDownload: {Type: Warning, Msg: Não foi possível realizar o download!, Where: start_automation},
        ErrorDownloadAttachment: {Type: Error, Msg: Não foi possível gerar o arquivo .zip!, Where: automationFunc - DownloadAttachment}, ###
        ErrorDragDrop: {Type: Error, Msg: Não foi possível segurar e arrastar o componente!, Where: automationFunc - drag_drop},
        ErrorDragDropToElement: {Type: Error, Msg: Não foi possível segurar e arrastar o componente até outro componente!, Where: automationFunc - drag_drop_to_element},
        ErrorEmptyLine: {Type: Error, Msg: Há uma linha em branco no caso de teste!, Where: ErrorEmptyLine},
        ErrorEST: {Type: Error, Msg: Não foi possível criar o EST!, Where: main_function},
        ErrorExecute: {Type: Error, Msg: Não foi possível abrir o aplicativo!, Where: Execute},
        ErrorExecuteStepByStep: {Type: Error, Msg: Erro na execução do passo a passo!, Where: automationCore - executeStepByStep},
        ErrorExecuteTestCase: {Type: Error, Msg: Erro ao carregar a execução do caso de teste!, Where: execute_test_case},
        ErrorExtractJson: {Type: Error, Msg: Erro ao extrair dados relevantes do JSON!, Where: automationAux - extract_jsonschema_relevant_data},
        ErrorFindContentApi: {Type: Error, Msg: Erro ao buscar conteúdo no retorno da API!, Where: automationAux - find_content_json},
        ErrorFillField: {Type: Error, Msg: Erro ao preencher campo!, Where: automationFunc - find_component},
        ErrorFindComponent: {Type: Error, Msg: O componente não foi encontrado para este passo!, Where: automationFunc - find_component},
        ErrorFindBrowser: {Type: Error, Msg: Não foi possível instalar o browser na máquina!, Where: automationFunc - open_browser},
        ErrorForwardPage: {Type: Error, Msg: Erro ao avançar a página!, Where: automationFunc - forward_page},
        ErrorFunctionValidateData: {Type: Error, Msg: Erro ao executar a validação!, Where: automationFunc - validate_data},
        ErrorInstallNewVersion: {Type: Error, Msg: Erro ao instalar a nova versão!, Where: automationAux},
        ErrorStartGenerateEvidence: {Type: Error, Msg: Erro ao gerar a evidência!, Where: startGenerateEvidence},
        ErrorGenerateHash: {Type: Error, Msg: Erro ao gerar o Hash!, Where: automationAux - generateHash},
        ErrorGetAttribute: {Type: Error, Msg: Erro ao obter o atributo do elemento!, Where: automationFunc - get_attribute},
        ErrorGetQuantityElements: {Type: Error, Msg: Erro ao encontrar os componentes., Where: automationFunc - get_quantity_elements},
        ErrorGetSteps: {Type: Error, Msg: Erro ao extrair passos do caso de teste!, Where: get_steps},
        ErrorGetParameters: {Type: Error, Msg: Erro ao extrair parâmetros do caso de teste!, Where: getParameters},
        ErrorGetProjects: {Type: Error, Msg: Erro ao carregar o projeto!, Where: connections - getProjects},
        ErrorGetTestCase: {Type: Warning, Msg: Este projeto não possui casos de teste! , Where: connections - getTestCase},
        ErrorGetTestCases: {Type: Error, Msg: Erro ao carregar o caso de teste!, Where: getTestCases},
        ErrorGetTestPlan: {Type: Warning, Msg: Este projeto não possui test plans!, Where: getTestPlans},
        ErrorGetTestPlans: {Type: Error, Msg: Erro ao carregar os testplans!, Where: getTestPlans},
        ErrorGetTestSuit: {Type: Warning, Msg: Este plano de teste não possui test suits!, Where: getTestSuits},
        ErrorGetTestSuits: {Type: Error, Msg: Erro ao carregar o test suit!, Where: getTestSuits},
        ErrorGetText: {Type: Error, Msg: Não foi possível obter o texto do componente e/ou da página!, Where: automationFunc - get_text},
        ErrorGetTextPart: {Type: Error, Msg: Não foi possível obter parte do texto do componenete e/ou da página!, Where: automationFunc - get_text_part},
        ErrorGetTitle: {Type: Error, Msg: Não foi possível obter o título da página!, Where: automationFunc - get_title},
        ErrorGetVariables: {Type: Error, Msg: Erro ao obter a massa de teste. Verifique se há variável em branco no caso de teste., Where: get_variables},
        ErrorGetUrl: {Type: Error, Msg: Não foi possível obter a URL da página!, Where: automationFunc - get_url},
        ErrorInform: {Type: Error, Msg: A tela de alerta NÃO foi encontrada!, Where: automationFunc - Inform},
        ErrorIsDisplayed: {Type: Error, Msg: Elemento NÃO localizado ou impossível de identificar se esta visível!, Where: automationFunc - is_displayed},
        ErrorIsEnable: {Type: Error, Msg: Elemento NÃO localizado ou impossível de identificar seu status!, Where: automationFunc - is_enable},
        ErrorIsSelected: {Type: Error, Msg: Elemento NÃO localizado ou impossível de identificar seu status!, Where: automationFunc - is_selected},
        ErrorHighlight: {Type: Error, Msg: Não foi possível destacar o componente!, Where: automationFunc - highlight},
        ErrorLineEmpty: {Type: Error, Msg: Há uma célula em branco no caso de teste!, Where: slice_datas},
        ErrorLoadConfigs: {Type: Error, Msg: Erro ao carregar as configurações!, Where: loadConfigs},
        ErrorLoadSwagger: {Type: Error, Msg: Erro na leitura do swagger!, Where: automationAux - load_swagger},
        ErrorLoadTestRun: {Type: Error, Msg: Erro ao carregar o TestRun!, Where: createTestRun},
        ErrorMain: {Type: Error, Msg: Erro ao executar o Main!, Where: automationCore - Main},
        ErrorMouseOver: {Type: Error, Msg: Objeto NÃO encontrado na tela!, Where: automationFunc - mouse_over},
        ErrorNoExecute: {Type: Error, Msg: Este passo NÃO foi ignorado com sucesso!, Where: noExecute},
        ErrorOpenBrowser: {Type: Error, Msg: Erro ao abrir o navegador!, Where: open_browser},
        ErrorOpenNewTab: {Type: Error, Msg: Erro ao abrir nova aba!, Where: automationFunc - open_new_tab},
        ErrorOpenPage: {Type: Error, Msg: Erro ao acessar página!, Where: automationFunc - open_page},
        ErrorPercentage: {Type: Error, Msg: Erro ao calcular a porcentagem!, Where: automationAux - percentage},
        ErrorReadHash: {Type: Error, Msg: Erro ao ler o Hash!, Where: readHash},
        ErrorRefreshPage: {Type: Error, Msg: "Erro ao atualizar a página!", Where: refresh_page},
        ErrorRemoveHtml: {Type: Error, Msg: Erro ao remover o HTML da string!, Where: remove_html},
        ErrorResolvedReference: {Type: Error, Msg: Erro ao encontrar a referência do JSON!, Where: automationAux - resolve_refs},
        ErrorReplacePasswordEvidence: {Type: Error, Msg: "Falha na alteração das senhas por asteriscos!", Where: replace_password_evidence},
        ErrorReplacePasswordPosition: {Type: Error, Msg: "A sintaxe do passo não está correta. Favor seguir a seguinte sintaxe:  Digitar no campo 'nome do campo' a senha 'conteúdo do senha'", Where: replace_password_evidence},
        ErrorRequest: {Type: Error, Msg: Falha na request!, Where: connections - several points},
        ErrorRequestApi: {Type: Error, Msg: Erro na request da API!, Where: automationFunc - request_api},
        ErrorResponseApi: {Type: Error, Msg: Erro na resposta da API!, Where: automationFunc - response_api},
        ErrorRightClick: {Type: Error, Msg: Erro ao clicar com o botão direito no elemento!, Where: automationFunc - right_click},
        ErrorReturnDefault: {Type: Error, Msg: "O foco não foi alterado!", Where: return_default},
        ErrorReturnIframe: {Type: Error, Msg: "O foco não foi alterado para o iframe desejado!", Where: automationFunc - return_frame},
        ErrorReturnWindow: {Type: Error, Msg: "O foco não foi alterado para a janela desejada!", Where: automationFunc - return_window},
        ErrorSaveHash: {Type: Error, Msg: Erro ao salvar o Hash!, Where: saveHash},
        ErrorSaveManualPrintScreen: {Type: Error, Msg: "Falha ao salvar as evidências do caso de teste manual!", Where: saveManualPrintScreen}, ###
        ErrorSaveToken: {Type: Error, Msg: Não foi possível salvar o Token no arquivo!, Where: save_token},
        ErrorScreenshot: {Type: Error, Msg: Não foi possível tirar o screenshot!, Where: main_function},
        ErrorSelectDropDownList: {Type: Error, Msg: Não foi possível selecionar o componente DropDownList!, Where: automationFunc - select_drop_down_list},
        ErrorSaveDownloadFileLocally: {Type: Error, Msg: Erro ao baixar os arquivos do caso de teste!, Where: SaveDownloadFileLocally}, ###
        ErrorUploadFileGit: {Type: Error, Msg: Erro ao adicionar o arquivo ao caso de teste!, Where: connections - upload_file_git},
        ErrorUploadFileAmount: {Type: Error, Msg: Não foi encontrada a quantidade de arquivos corretos na pasta de download., Where: connections - upload_file_git},
        ErrorUploadFileGitToken: {Type: Error, Msg: Erro ao adicionar o Token do arquivo ao caso de teste!, Where: connections - upload_file_git},
        ErrorSaveFile: {Type: Error, Msg: Erro ao salvar o arquivo localmente!, Where: automationFunc - save_file},
        ErrorScrollPage: {Type: Error, Msg: Erro ao rolar a página!, Where: scroll_page},
        ErrorSetLanguage: {Type: Error, Msg: Erro ao configurar o idioma!, Where: automationAux - set_language},
        ErrorSendRequest: {Type: Error, Msg: Erro ao enviar a 'request' da API., Where: connection - send_request},
        ErrorSizeName: {Type: Error, Msg: O nome do caso de teste deve possuir 103 caracteres ou menos!, Where: automationAux - validate_test_name},
        ErrorSliceDatas: {Type: Error, Msg: Erro ao desmembrar os dados dos passos!, Where: connections - slice_datas},
        ErrorSliceDataBlank: {Type: Error, Msg: Verifique no Azure. Há pelo menos um campo em branco!, Where: slice_datas},
        ErrorSpecialCharacter: {Type: Error, Msg: "O nome do caso de teste não deve possuir nenhum dos caracteres a seguir ", Where: automationAux - validate_test_name},
        ErrorStartAutomation: {Type: Error, Msg: Erro ao executar os passos de teste!, Where: automationCore - start_automation},
        ErrorStep: {Type: Error, Msg: Erro no passo!, Where: main_function},
        ErrorStepFor: {Type: Error, Msg: Erro na execução dos passos!, Where: main_function},
        ErrorPressButton: {Type: Error, Msg: A tecla informada é inválida!, Where: press_button},
        ErrorReadHTMLContent: {Type: Error, Msg: Erro ao ler o HTML, Where: automationAux - read_html_content},
        ErrorReleaseNotes: {Type: Error, Msg: Erro ao ler o ReadMe e obter o Release Notes., Where: automationAux - release_notes},
        ErrorTakePicture: {Type: Error, Msg: Erro ao executar o PrintScreen do passo!, Where: automationFunc - take_picture},
        ErrorTestNameValidation: {Type: Error, Msg: Falha na validação do nome do caso de teste!, Where: automationAux - validate_test_name},
        ErrorTranslateMessage: {Type: Error, Msg: Erro ao realizar a tradução das mensagens!, Where: automationAux - translateMsg},
        ErrorUpdateStatusAutomated: {Type: Error, Msg: Erro ao atualizar o status do caso de teste para automatizado no WIT!, Where: update_status_automated},
        ErrorUpdateLabels: {Type: Error, Msg: Erro ao atualizar as labels no caso de teste!, Where: connections - upload_download_file_id},
        ErrorUploadDownloadFile: {Type: Error, Msg: Error ao realizar o upload do arquivo!, Where: upload_download_file},
        ErrorValidationAPI: {Type: Error, Msg: Não foi possível identificar este valor no retorno da API!, Where: find_content_json},
        ErrorValidateData: {Type: Error, Msg: Resultado obtido diferente do resultado esperado!, Where: validate_data},
        ErrorVerifyBrowser: {Type: Error, Msg: Falha ao fechar o browser!, Where: verify_browser},
        ErrorVerifyFile: {Type: Error, Msg: Falha ao verificar o arquivo no diretório!, Where: verify_file},
        ErrorWordAddInfo: {Type: Error, Msg: Ocorreu um erro ao adicionar uma informação no Word!, Where: word_add_info},
        ErrorWait: {Type: Error, Msg: Ocorreu um erro no Aguardar!, Where: automationFunc - wait},
        ErrorWordAddSteps: {Type: Error, Msg: Ocorreu um erro ao adicionar o passo no Word!, Where: automationAux - word_add_steps},
        ErrorWordFindParagraph: {Type: Error, Msg: Não foi possivel encontrar o paragrafo inicial!, Where: word_add_steps},
        ErrorWordSearchText: {Type: Error, Msg: Ocorreu um erro ao procurar o passo no Word!, Where: automationAux - word_search_text},
        ErrorWordSetCTInfo: {Type: Error, Msg: Ocorreu um erro ao adicionar informações no arquivo word!, Where: automationAux - word_add_steps},
        ErrorWordToPdf: {Type: Error, Msg: Ocorreu um erro ao converter para PDF!, Where: automationAux - word_to_pdf},
        EvidenceFolder: {Type: Success, Msg: O diretório de evidências foi criado com sucesso., Where: automationAux - create_directory},
        Execute: {Type: Success, Msg: O aplicativo foi aberto com sucesso!, Where: Execute},
        ExecuteTestCase: {Type: Success, Msg: Sucesso ao carregar a execução do caso de teste., Where: execute_test_case},
        FindComponent: {Type: Success, Msg: "Encontrou o componente -->", Where: automationFunc - find_component},
        FillField: {Type: Success, Msg: O campo foi preenchido com sucesso., Where: automationFunc - fill_field},
        ForwardPage: {Type: Success, Msg: A página avançou com sucesso., Where: automationFunc - forward_page},
        GetAttribute: {Type: Success, Msg: Sucesso ao obter o atributo do elemento., Where: automationFunc - get_attribute},
        GetQuantityElements: {Type: Success, Msg: Encontrou os componentes., Where: automationFunc - get_quantity_elements},
        GetSteps: {Type: Success, Msg: Sucesso ao extrair passos do caso de teste!, Where: get_steps},
        GetText: {Type: Success, Msg: Sucesso ao obter texto da página., Where: automationFunc - get_text},
        GetTextPart: {Type: Success, Msg: Sucesso ao obter parte do texto de um componente., Where: automationFunc - get_text_part},
        GetTestCaseName: {Type: Success, Msg: Sucesso ao extrair o nome do caso de teste., Where: get_test_case_name},
        GetTitle: {Type: Success, Msg: Sucesso ao obter o título da página., Where: automationFunc - get_title},
        GetUrl: {Type: Success, Msg: Sucesso ao obter a URL da página., Where: automationFunc - get_url},
        GetVariables: {Type: Success, Msg: Sucesso ao obter a massa de teste., Where: get_variables},
        Inform: {Type: Success, Msg: A tela de alerta foi encontrada com sucesso., Where: automationFunc - inform},
        InstallNewVersion: {Type: Success, Msg: Download realizado com sucesso! - Versão , Where: automationAux - check_new_version},
        IsDisplayed: {Type: Success, Msg: Elemento localizado., Where: automationFunc - is_displayed},
        IsDisplayedNo: {Type: Success, Msg: Elemento não foi localizado., Where: automationFunc - is_displayed},
        IsEnable: {Type: Success, Msg: Elemento localizado., Where: automationFunc - is_enable},
        IsSelected: {Type: Success, Msg: Elemento localizado., Where: automationFunc - is_selected},
        NoExecute: {Type: Success, Msg: Este passo foi ignorado com sucesso., Where: noExecute},
        NoSelectDropDownList: {Type: Error, Msg: Nenhuma valor correspondente foi encontrado dentro deste DropDownList!, Where: automationFunc - select_drop_down_list},
        MouseOver: {Type: Success, Msg: O mouse foi movimentado com sucesso., Where: automationFunc - mouse_over},
        OpenPage: {Type: Success, Msg: Acesso à página realizado com sucesso., Where: automationFunc - open_page},
        OpenBrowser: {Type: Success, Msg: Browser aberto com sucesso., Where: automationFunc - open_browser},
        OpenNewTab: {Type: Success, Msg: Aba aberta com sucesso., Where: automationFunc - open_new_tab},
        Percentage: {Type: Success, Msg: Porcentagem calculada com sucesso., Where: start_automation - percentage},
        PressButton: {Type: Success, Msg: Botão pressionado., Where: automationFunc - press_button},
        ReleaseNotes: {Type: Log, Msg: Versões da automação, Where: automationAux - release_notes},
        RefreshPage: {Type: Success, Msg: Página atualizada., Where: automationFunc - refresh_page},
        ReturnDefault: {Type: Success, Msg: O foco foi alterado., Where: return_default},
        ReturnIframe: {Type: Success, Msg: O foco foi alterado para o iframe desejado., Where: automationFunc - return_frame},
        ReturnWindow: {Type: Success, Msg: O foco foi alterado para a janela desejada., Where: automationFunc - return_window},
        RightClick: {Type: Success, Msg: Clique no botão direito realizado com sucesso., Where: automationFunc - right_click},
        SaveDownloadFileLocally: {Type: Success, Msg: Os arquivos do caso de teste foram baixados com sucesso., Where: SaveDownloadFileLocally}, ###
        SavingEvidence: {Type: Log, Msg: A evidência está sendo gerada..., Where: automationCore - start_automation},
        SaveManualPrintScreen: {Type: Success, Msg: Sucesso ao salvar as evidências deste passo., Where: saveManualPrintScreen}, ###
        SaveToken: {Type: Success, Msg: O Token foi gravado com sucesso., Where: save_token},
        SaveFile: {Type: Success, Msg: O download foi realizado com sucesso., Where: automationFunc - save_file},
        ScrollPage: {Type: Success, Msg: O comando para rolar a página foi executado com sucesso., Where: scroll_page},
        SelectDropDownList: {Type: Success, Msg: Item selecionado na DropDownList., Where: automationFunc - select_drop_down_list},
        SetLanguage: {Type: Success, Msg: O idioma foi configurado com sucesso., Where: set_language},
        SliceDatas: {Type: Success, Msg: Sucesso ao desmembrar os dados do caso de teste., Where: connections - slice_datas},
        Step: {Type: Log, Msg: Passo de número, Where: automationCore - executeStepByStep},
        StepBlank: {Type: Log, Msg: ' ', Where: ' '},
        TakePicture: {Type: Success, Msg: PrintScreen realizado com sucesso., Where: automationFunc - take_picture},
        TestCaseFinished: {Type: Log, Msg: Caso de teste finalizado., Where: main_function},
        UploadDownloadFile: {Type: Success, Msg: Upload do arquivo para o Azure realizado com sucesso., Where: upload_download_file},
        UploadDownloadFileId: {Type: Success, Msg: ID do download capturado com sucesso., Where: upload_download_file_id}, ###
        UploadFileGit: {Type: Success, Msg: O upload do arquivo foi realizado com sucesso no GitLab., Where: connections - upload_file_git},
        UploadFileGitToken: {Type: Success, Msg: A referência do arquivo foi gerado com sucesso no GitLab., Where: connections - upload_file_gitToken},
        UpdateLabels: {Type: Success, Msg: Atualização das labels realizada com sucesso!, Where: connections - upload_download_file_id},
        UpdateStatusAutomated: {Type: Success, Msg: Sucesso ao atualizar o status no Azure!, Where: update_status_automated},
        UpdateTryAgain: {Type: Error, Msg: Tente novamente, Where: AppAutomation},
        ValidateData: {Type: Success, Msg: Dados validados com sucesso., Where: automationFunc - validate_data},
        ValidateDataExpected: {Type: Log, Msg: Texto esperado., Where: automationFunc - validate_dataExpected},
        ValidateDataObtained: {Type: Log, Msg: Texto obtido., Where: automationFunc - validate_dataObtained},
        Wait: {Type: Success, Msg: Tempo aguardado com sucesso., Where: automationFunc - wait},
        WarningEvidenceFolder: {Type: Warning, Msg: A evidência NÃO foi atualizada., Where: automationCore - create_directory},
        WarningFindComponent: {Type: Warning, Msg: NÃO encontrou o componente para interagir., Where: automationFunc - find_component}
    }


#Folder list.
directories:
    {
        AutomationPath: C:\ProgramData\QA-Automation\Automation\Blue\Automation,
        ConfigFolder: Automation\configs,
        DownloadFolder: C:\ProgramData\QA-Automation-Files\Repository\Download,
        ESTFile: Automation\evidence\ETS - ,
        EvidenceFolder: C:\ProgramData\QA-Automation-Files\Repository\Evidences,
        EvidenceFolderManual: C:\ProgramData\QA-Automation-Files\Repository\Evidences\Manual,
        GitUrlReadme: https://raw.githubusercontent.com/fv112/Automation/CommandLine/README.md,
        HashFolder: C:\ProgramData\QA-Automation-Files\Repository\Hash,
        LogFolder: C:\ProgramData\QA-Automation-Files\Repository\Logs,
        SwaggerFolder: C:\ProgramData\QA-Automation-Files\Repository\Swagger,
        Temp: C:\ProgramData\QA-Automation-Files\Repository\Temp\,
        TestSetPath: '',
        UnavailablePrint: Unavailable.jpg,
        UpdateFolder: C:\ProgramData\QA-Automation-Files\Repository\NewVersion
    }

# List of other configurations.
otherConfigs:
    {
        Api_Authorization: '',
        Api_Body: '',
        Api_Endpoint: '',
        Api_ExtractInfo: {Type: Info, Msg: Dados relevantes para JSON Schema extraídos e salvos como., Where: automationAux - api_check},
        Api_Headers: '',
        Api_NoResponseNeeded: {Type: Info, Msg: Não há retorno para ser validado neste passo., Where: automationAux - word_add_steps},
        Api_Params: '',
        Api_Response: '',
        Api_StatusCode: ,
        Api_Step: False,
        AskCt: {Type: Info, Msg: "Executar um caso de teste isolado? Tecle ENTER (padrão) para SIM ou tecle [Y/y/S/s] = Sim ou [N/n] = Não: ", Where: connections - getTestCases},
        Bearer: 'rrkae8z2EMv_kfxXdCD-',
        BearerUpload: 'FUAsSU4p9GMLTVk_hLvv',
        Browser: '',
        ComputerName: '',
        ChooseBetweenAutomationCompare: {Type: Info, Msg: "Clique abaixo no que deseja realizar", Where: AppAutomation},
        ChooseAutomation: {Type: Info, Msg: "Executar Automação", Where: AppAutomation },
        ChooseCompare: {Type: Info, Msg: "Executar Comparação", Where: AppAutomation },
        ChooseTestCase: {Type: Info, Msg: "Informe o ID do caso de teste:", Where: getTestCases},
        CleanConsole: {Type: Info, Msg: "Limpar console", Where: AppAutomation},
        CloseBrowser: {Type: Success, Msg: Fechar o navegador., Where: close},
        CloseTokenMenu: {Type: Info, Msg: "SALVAR", Where: automationAux},
        DesktopFunctions: ['Execute', 'Ejecute'],
        DisabledStep: {Type: Info, Msg: "Passo desabilitado devido as necessidades do teste", Where: word_add_steps},
        DownloadingFile: {Type: Info, Msg: "Baixando arquivo ...", Where: automationFunc - save_file},
        DownloadFinished: {Type: Info, Msg: "O arquivo foi baixado", Where: automationFunc - save_file},
        EmptySyntax: {Type: Info, Msg: "Esse verbo não possui sintaxe", Where: AppAutomation},
        EnableCookies: {Type: Info, Msg: "Habilitar Cookies", Where: AppAutomation},
        ErrorJsonValidate: {Type: Error, Msg: "Erro na validação do JSON!", Where: response_api},
        EvidenceName: Screenshot_,
        EvidenceNameApi: Response_,
        EvidenceExtension: .png,
        EvidenceExtensionApi: .json,
        EvidenceWidth: Lib.Inches(6.0),
        EvidenceHeight: Lib.Inches(3.8),
        ETSName: CT,
        ETSExtension: .docx,
        Exit: {Type: Info, Msg: Fechar o menu., Where: azureConnection},
        FlagEnableCookie: '',
        GeneratingEvidence: {Type: Info, Msg: Gerando arquivo de evidência ..., Where: AutomationCore_Azure},
        GitLabPackage: 'https://raw.githubusercontent.com/fv112/Automation/CommandLine/exec/',
        GoBack: {Type: Info, Msg: "Voltar", Where: AppAutomation},
        GoToConsole: {Type: Info, Msg: "Console", Where: AppAutomation},
        HomePage: 'about:blank',
        IndexError: {Type: Info, Msg: "Por favor, verifique se inseriu as informações corretas", Where: automatizationCore},
        InformProject: {Type: Info, Msg: "Por favor informe o ID do projeto:", Where: getProjects},
        InterfaceEmptyFields: {Type: Info, Msg: Verifique se todos os campos estão devidamente preenchidos., Where: AppAutomation},
        InvalidCharacter: "}}{{*@!#$%^&*<>?|:.*'\/\"",
        InvalidTokenMessage: {Type: Info, Msg: "O token cadastrado é inválido. Por favor, tente novamente.", Where: AppAutomation},
        JsonValidateSuccess: {Type: Success, Msg: "O JSON foi validado com sucesso!", Where: find_content_json},
        JsonValidateFailed: {Type: Error, Msg: "Divergência na validação do JSON!", Where: find_content_json},
        Language: '',
        LanguageError: {Type: Warning, Msg: O idioma do seu computador deve ser -> Português (Brasil) ou Espanhol (Espanha) ou Inglês (EUA)!, Where: main - ManualEvidence},
        MsgFinishedCompare: {Type: Info, Msg: Finalizado, Where: ManualEvidence}, ###
        MsgFinishedExecution: {Type: Info, Msg: Finalizado, Where: automationCore - main},
        NewVersionAvailable1: {Type: Info, Msg: "Ao finalizar será necessário executar a automação novamente para instalar.", Where: automationAux - check_new_version},
        NewVersionAvailable2: {Type: Info, Msg: "Deseja realizar o download [Y/S] = SIM ou [N/n/Enter] = Não?", Where: automationAux - check_new_version},
        NewVersionAvailableTitle: {Type: Info, Msg: "Nova versão disponível!", Where: automationAux - check_new_version},
        NoAction: {Type: Info, Msg: "Não", Where: automationCore},
        NoEvidences: {Type: Info, Msg: Não há imagens para este teste ou algum iteração não foi executada., Where: connections},
        NoExecutions: {Type: Info, Msg: Não há execuções para este teste., Where: azureConnection}, ###
        NoStepFailed: {Type: Info, Msg: Não houve passo com falha., Where: automationAux - word_add_info},
        NoTranslating: 'The messages were not changed. A new translation was not necessary.',
        OptionInvalid: {Type: Info, Msg: não é uma opção válida., Where: connections},
        Percentage: {Type: Info, Msg: Porcentagem da automação executada., Where: start_automation},
        ProjectList: {Type: Info, Msg: "Lista de projetos:", Where: connections},
        RequestOK: {Type: Info, Msg: Request realizada com sucesso!, Where: connections},
        RunAgain: {Type: Info, Msg: Execute a automação novamente., Where: getProjects},
        SaveEvidenceMsg: {Type: Info, Msg: "Deseja salvar evidências? Tecle ENTER (padrão) para NÃO ou [Y/y/S/s] para SIM ou [N/n] para NÃO:", Where: automationCore - main},
        StatusIDTestCase: {Type: Info, Msg: Point ID do caso de teste consultado com sucesso., Where: connections},
        StatusTestCase: {Type: Info, Msg: Caso de teste consultado com sucesso., Where: connections},
        SaveToken: {Type: Info, Msg: "GUARDAR TOKEN", Where: automationAux},
        Step: {Type: Info, Msg: PASSO, Where: automationCore - Step},
        StepName: Step,
        StepWithBug: {Type: Info, Msg: Bug encontrado neste passo!, Where: automationAux - word_add_steps},
        StepWithPrevBug: {Type: Info, Msg: Bug encontrado em um passo anterior!, Where: automationAux - word_add_steps},
        Summary: {Type: Info, Msg: Este caso de teste não possui nenhuma informação adicional., Where: automationCore},
        TestCaseList: {Type: Info, Msg: "Lista de casos de teste ", Where: connections},
        TestPlanList: {Type: Info, Msg: "Lista de planos de teste ", Where: connections},
        TestSuitList: {Type: Info, Msg: "Lista de suite de teste ", Where: connections},
        TimeoutSession: '1',
        TranslateMessage: 'Messages translated with success!',
        Translating: 'Please wait, the translation is running. It could take some minutes...',
        UpdateButtonNo: {Type: Info, Msg: "Não", Where: AppAutomation},
        UpdateButtonYes: {Type: Info, Msg: "Sim", Where: AppAutomation},
        Verb: {Type: Info, Msg: VERBO, Where: automationCore},
        WaitTranslate: {Type: Info, Msg: Please wait. The message is being translating. This can take some minutes, Where: automationAux - translateMsg}
    }