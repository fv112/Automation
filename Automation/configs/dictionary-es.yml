# Verbs list.
verbs:
    {
        # Portuguese.
        # Spanish (with _ after is the same as Portuguese).
        # English (with __ after is the same as Portuguese).
        Abrir: {Language: Portuguese, Function: Lib.Func.Main.openNewTab},
        Abrir_: {Language: Spanish, Function: Lib.Func.Main.openNewTab},
        Open: {Language: English, Function: Lib.Func.Main.openNewTab},

        Acessar: {Language: Portuguese, Function: Lib.Func.Main.openPage},
        Acceder: {Language: Spanish, Function: Lib.Func.Main.openPage},
        Access: {Language: English, Function: Lib.Func.Main.openPage},

        Aguardar: {Language: Portuguese, Function: Lib.Func.Main.wait},
        Esperar: {Language: Spanish, Function: Lib.Func.Main.wait},
        Wait: {Language: English, Function: Lib.Func.Main.wait},

        Alterar: {Language: Portuguese, Function: Lib.Func.Main.alter},
        Alternar: {Language: Portuguese, Function: Lib.Func.Main.alter},
        Cambiar: {Language: Spanish, Function: Lib.Func.Main.alter},
        Switch: {Language: English, Function: Lib.Func.Main.alter},

        Arrastar: {Language: Portuguese, Function: Lib.Func.Main.dragDrop},
        Arrastar_: {Language: Spanish, Function: Lib.Func.Main.dragDrop},
        Drag: {Language: English, Function: Lib.Func.Main.dragDrop},

        Atualizar: {Language: Portuguese, Function: Lib.Func.Main.refreshPage},
        Actualizar: {Language: Spanish, Function: Lib.Func.Main.refreshPage},
        Refresh: {Language: English, Function: Lib.Func.Main.refreshPage},

        Avançar: {Language: Portuguese, Function: Lib.Func.Main.forwardPage},
        Avanzar: {Language: Spanish, Function: Lib.Func.Main.forwardPage},
        Forward: {Language: English, Function: Lib.Func.Main.forwardPage},

        Clicar: {Language: Portuguese, Function: Lib.Func.Main.click},
        Clicar_: {Language: Spanish, Function: Lib.Func.Main.click},
        Click: {Language: English, Function: Lib.Func.Main.click},

        Delete: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Delete_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Delete__: {Language: English, Function: Lib.Func.Main.request_api},

        Duplo: {Language: Portuguese, Function: Lib.Func.Main.doubleClick},
        DobleClic: {Language: Spanish, Function: Lib.Func.Main.doubleClick},
        Double: {Language: English, Function: Lib.Func.Main.doubleClick},

        Execute: {Language: Portuguese, Function: Lib.Func.Main.execute},
        Ejecute: {Language: Spanish, Function: Lib.Func.Main.execute},
        Execute_: {Language: English, Function: Lib.Func.Main.execute},

        Fechar: {Language: Portuguese, Function: Lib.Func.Main.close},
        Cerrar: {Language: Spanish, Function: Lib.Func.Main.close},
        Close: {Language: English, Function: Lib.Func.Main.close},

        Get: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Get_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Get__: {Language: English, Function: Lib.Func.Main.request_api},

        Informar: {Language: Portuguese, Function: Lib.Func.Main.inform},
        Informar_: {Language: Spanish, Function: Lib.Func.Main.inform},
        Inform: {Language: English, Function: Lib.Func.Main.inform},

        Mover: {Language: Portuguese, Function: Lib.Func.Main.mouseOver},
        Mover_: {Language: Spanish, Function: Lib.Func.Main.mouseOver},
        Move: {Language: English, Function: Lib.Func.Main.mouseOver},

        Navegar: {Language: Portuguese, Function: Lib.Func.Main.openBrowser},
        Navegar_: {Language: Spanish, Function: Lib.Func.Main.openBrowser},
        Navegate: {Language: English, Function: Lib.Func.Main.openBrowser},

        NoExecute: {Language: Portuguese, Function: Lib.Func.Main.noExecute},
        NoExecute_: {Language: Spanish, Function: Lib.Func.Main.noExecute},
        NoExecute__: {Language: English, Function: Lib.Func.Main.noExecute},

        Post: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Post_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Post__: {Language: English, Function: Lib.Func.Main.request_api},

        Put: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Put_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Put__: {Language: English, Function: Lib.Func.Main.request_api},

        Preencher: {Language: Portuguese, Function: Lib.Func.Main.fillField},
        Llenar: {Language: Spanish, Function: Lib.Func.Main.fillField},
        Fill: {Language: English, Function: Lib.Func.Main.fillField},

        Pressionar: {Language: Portuguese, Function: Lib.Func.Main.rightClick},
        Presionar: {Language: Spanish, Function: Lib.Func.Main.rightClick},
        Press: {Language: English, Function: Lib.Func.Main.rightClick},

        Response: {Language: Portuguese, Function: Lib.Func.Main.responseAPI},
        Response_: {Language: Spanish, Function: Lib.Func.Main.responseAPI},
        Response__: {Language: English, Function: Lib.Func.Main.responseAPI},

        Retornar: {Language: Portuguese, Function: Lib.Func.Main.returnDefault},
        Retornar_: {Language: Spanish, Function: Lib.Func.Main.returnDefault},
        Return: {Language: English, Function: Lib.Func.Main.returnDefault},

        Rolar: {Language: Portuguese, Function: Lib.Func.Main.scrollPage},
        Desplazar: {Language: Spanish, Function: Lib.Func.Main.scrollPage},
        Scroll: {Language: English, Function: Lib.Func.Main.scrollPage},

        Salvar: {Language: Portuguese, Function: Lib.Func.Main.saveFile},
        Guardar: {Language: Spanish, Function: Lib.Func.Main.saveFile},
        Save: {Language: English, Function: Lib.Func.Main.saveFile},

        Segurar: {Language: Portuguese, Function: Lib.Func.Main.dragDropToElement},
        Sostener: {Language: Spanish, Function: Lib.Func.Main.dragDropToElement},
        Hold: {Language: English, Function: Lib.Func.Main.dragDropToElement},

        Selecionar: {Language: Portuguese, Function: Lib.Func.Main.selectDropDownList},
        Selecionar_: {Language: Spanish, Function: Lib.Func.Main.selectDropDownList},
        Select: {Language: English, Function: Lib.Func.Main.selectDropDownList},

        Teclar: {Language: Portuguese, Function: Lib.Func.Main.pressButton},
        Teclar_: {Language: Spanish, Function: Lib.Func.Main.pressButton},
        Type: {Language: English, Function: Lib.Func.Main.pressButton},

        Validar: {Language: Portuguese, Function: Lib.Func.Main.validateData},
        Validar_: {Language: Spanish, Function: Lib.Func.Main.validateData},
        Validate: {Language: English, Function: Lib.Func.Main.validateData},

        Voltar: {Language: Portuguese, Function: Lib.Func.Main.backPage},
        Retroceder: {Language: Spanish, Function: Lib.Func.Main.backPage},
        Back: {Language: English, Function: Lib.Func.Main.backPage}
    }

#List to search the elements attributes to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForAttribute:
    {
        buscarPorID: id,
        buscarPorNome: name,
        buscarPorClass: class,
        buscarPorHREF: a,
        buscarPorSize: size
    }
#List to search the elements to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForComponent:
    {
        buscarPorDiv: div,
        buscarPorTD: td,
        buscarPorTR: tr,
        buscarPorSpan: span
    }

#List of logs.
logs:
    {
        ActionStart: {Type: Log,Msg: Inicio de ejecución de la automatización., Where: createLog},
        AlterIframe: {Type: Success,Msg: El enfoque ha cambiado al IFRAME., Where: automationFunc - alterFrame},
        AlterWindow: {Type: Success,Msg: Se ha cambiado el enfoque de la pantalla., Where: automationFunc - alterWindow},
        BackPage: {Type: Success,Msg: Éxito en devolver la página., Where: automationFunc - BackPage},
        CheckDownloadFile: {Type: Success,Msg: Compruebe si los archivos "Línea base" y "Nuevo" ya están en el elemento de trabajo., Where: CheckDownloadFile},
        Click: {Type: Success,Msg: Haga clic en Hecho con éxito., Where: automationFunc - click},
        ConfigureSavePath: {Type: Success,Msg: Éxito en la configuración del directorio de descarga., Where: _configureSavePath},
        ConvertPDF: {Type: Success,Msg: Se ha creado EST a PDF., Where: automationCore - startAutomation},
        CouldNotCheckForUpdates: {Type: Log,Msg: No se puede verificar la actualización, Where: AppAutomation},
        CloseBrowser: {Type: Success,Msg: El navegador se ha cerrado correctamente., Where: automationFunc - close},
        CloseWindow: {Type: Success,Msg: La ventana se ha cerrado correctamente., Where: automationFunc - close},
        CompareFile: {Type: Success,Msg: El archivo se comparó correctamente., Where: compareBeyondCompare}, ###
        DeleteDownloadFile: {Type: Success,Msg: El archivo descargado se ha eliminado correctamente., Where: DeleteDownloadFile}, ###
        DeleteFile: {Type: Log,Msg: Eliminado el archivo, Where: automationAux - createDirectory},
        DeleteFolder: {Type: Log,Msg: Eliminado el directorio, Where: automationAux - createDirectory},
        DoubleClick: {Type: Success,Msg: Doble clic realizado con éxito., Where: doubleClick},
        DownloadPackageCompleted: {Type: Log,Msg: La descarga del paquete se completó correctamente., Where: automationAux - checkNewVersion},
        DownloadUpdateCompletedMsg: {Type: Log,Msg: DE ACUERDO, Where: AppAutomation}, ###
        DownloadUpdateCompletedTitle: {Type: Log,Msg: Descarga completada exitosamente., Where: AppAutomation}, ###
        DragDrop: {Type: Success,Msg: El componente se arrastró con éxito., Where: automationFunc - dragDrop},
        DragDropToElement: {Type: Success,Msg: Fue posible mantener y arrastrar con éxito el componente a otro componente., Where: dragDropToElement},
        ErrorAddLog: {Type: Error,Msg: ¡Error al generar el registro!, Where: automationAux - addlog},
        ErrorAddJsonVariation: {Type: Error,Msg: ¡Error al actualizar el registro!, Where: automationAux - add_variations},
        ErrorAlter: {Type: Error,Msg: No se puede cambiar el enfoque, Where: automationFunc - alter},
        ErrorAlterIframe: {Type: Error,Msg: El foco no ha cambiado al IFRAME., Where: automationFunc - alterFrame},
        ErrorAlterWindow: {Type: Error,Msg: ¡El enfoque no cambió en la pantalla!, Where: automationFunc - alterWindow},
        ErrorAttachmentList: {Type: Error,Msg: ¡Error al leer el archivo adjunto del caso de prueba manual!, Where: attachmentList},
        ErrorAPIMissingBody: {Type: Error,Msg: No se reportó ningún cadáver. ¡Se requiere probar el esquema!, Where: automationFunc - requestAPI},
        ErrorAPIMissingInfo: {Type: Error,Msg: ¡Error al ejecutar la API!, Where: automationFunc - requestAPI},
        ErrorAPICheck: {Type: Error,Msg: ¡Error en la validación del esquema!, Where: automationAux - api_check},
        ErrorAPISchema: {Type: Error,Msg: "El paso con SCHEMA debe ser el último paso del caso de prueba", Where: automationFunc - request_api},
        ErrorBackPage: {Type: Error,Msg: ¡No se pudo regresar a la página!, Where: automationFunc - BackPage},
        ErrorCheckDownloadFile: {Type: Error,Msg: ¡Error al comprobar si el archivo de descarga ya está en Workitem!, Where: CheckDownloadFile},
        ErrorCheckNewVersion:{Type: Error,Msg: Error al actualizar a nueva versión, Where: automationAux - checkNewVersion},
        ErrorClick: {Type: Error,Msg: ¡Error al hacer clic en el elemento!, Where: automationFunc - click},
        ErrorClose: {Type: Error,Msg: ¡Error al cerrar! Si desea cerrar el navegador, incluya el primer parámetro en el paso., Where: automationFunc - close},
        ErrorConfigureLanguage: {Type: Error,Msg: ¡Ocurrió un error en la configuración del idioma!, Where: configureLanguage},
        ErrorConfigureSavePath: {Type: Error,Msg: ¡Error al configurar el directorio de descarga!, Where: _configureSavePath},
        ErrorConnection: {Type: Error,Msg: Esto no es un fracaso en la automatización. GitLab no responde. ¡Comprueba tu conexión y vuelve a intentarlo más tarde!, Where: connections},
        ErrorConvertPDF: {Type: Error,Msg: ¡No se puede convertir ETS a PDF!, Where: automationCore},
        ErrorCompareFile: {Type: Error,Msg: ¡No se puede abrir Beyond Compare!, Where: compareBeyondCompare}, ###
        ErrorCore: {Type: Error,Msg: ¡Ocurrió un error en la aplicación!, Where: mainFunction},
        ErrorCreateDirectory: {Type: Error,Msg: ¡Ocurrió un error al crear el directorio!, Where: automationAux - createDirectory},
        ErrorCreateLog: {Type: Error,Msg: ¡Error al crear el registro!, Where: createlog},
        ErrorDeleteDirectory: {Type: Error,Msg: ¡Ocurrió un error al eliminar el directorio!, Where: deleteDirectory},
        ErrorDeleteDownloadFile: {Type: Error,Msg: ¡Error al eliminar el archivo descargado!, Where: DeleteDownloadFile},
        ErrorDeleteFiles: {Type: Error,Msg: ¡Error al eliminar archivos!, Where: automationAux - deleteFiles},
        ErrorDoubleClick: {Type: Error,Msg: ¡Error al hacer doble clic en el elemento!, Where: doubleClick},
        ErrorDownloadUpdate: {Type: Error,Msg: No se pudo descargar., Where: automationAux - checkNewVersion},
        ErrorDownload: {Type: Warning,Msg: ¡No se puede descargar!, Where: startAutomation},
        ErrorDownloadAttachment: {Type: Error,Msg: ¡No se puede generar el archivo .zip!, Where: automationFunc - DownloadAttachment},
        ErrorDragDrop: {Type: Error,Msg: ¡No se puede sostener y arrastrar el componente!, Where: automationFunc - dragDrop},
        ErrorDragDropToElement: {Type: Error,Msg: ¡No se puede mantener y arrastrar un componente a otro componente!, Where: automationFunc - DragDropToElement},
        ErrorEmptyLine: {Type: Error,Msg: ¡Hay una línea en blanco en el caso de prueba!, Where: ErrorEmptyLine},
        ErrorEST: {Type: Error,Msg: ¡No se pudo crear EST!, Where: mainFunction},
        ErrorExecute: {Type: Error,Msg: ¡No se puede abrir la aplicación!, Where: Execute},
        ErrorExecuteStepByStep: {Type: Error,Msg: ¡Error al ejecutar el paso a paso!, Where: automationCore - executeStepByStep},
        ErrorExecuteTestCase: {Type: Error,Msg: ¡Error al cargar la ejecución del caso de prueba!, Where: executeTestCase},
        ErrorExtractJson: {Type: Error,Msg: ¡Error al extraer datos relevantes de JSON!, Where: automationAux - extract_jsonschema_relevant_data},
        ErrorFindContentAPI: {Type: Error,Msg: ¡Error al recuperar contenido al regresar de la API!, Where: automationAux - find_content_json},
        ErrorFillField: {Type: Error,Msg: ¡Error al completar el campo!, Where: automationFunc - findElement},
        ErrorFindElement: {Type: Error,Msg: ¡No se encontró el componente para este paso!, Where: automationFunc - findElement},
        ErrorFindBrowser: {Type: Error,Msg: ¡No se puede instalar el navegador en la máquina!, Where: automationFunc - openBrowser},
        ErrorForwardPage: {Type: Error,Msg: ¡Error al avanzar la página!, Where: automationFunc - ForwardPage},
        ErrorFunctionValidateData: {Type: Error,Msg: ¡Error al ejecutar la validación!, Where: automationFunc - validateData},
        ErrorInstallNewVersion: {Type: Error,Msg: ¡Error al instalar la nueva versión!, Where: automationAux},
        ErrorStartGenerateEvidence: {Type: Error,Msg: ¡Error al generar evidencia!, Where: startGenerateEvidence},
        ErrorGenerateHash: {Type: Error,Msg: ¡Error al generar Hash!, Where: automationAux - generateHash},
        ErrorGetAttribute: {Type: Error,Msg: ¡Error al obtener el atributo del elemento!, Where: automationFunc - GetAttribute},
        ErrorGetQuantityElements: {Type: Error,Msg: Error al encontrar componentes., Where: automationFunc - getQuantityElements},
        ErrorGetSteps: {Type: Error,Msg: ¡Error al extraer los pasos del caso de prueba!, Where: GetSteps},
        ErrorGetParameters: {Type: Error,Msg: ¡Error al extraer los parámetros del caso de prueba!, Where: getParameters},
        ErrorGetProjects: {Type: Error,Msg: ¡Error al cargar el proyecto!, Where: connections - getProjects},
        ErrorGetTestCase: {Type: Warning,Msg: ¡Este proyecto no tiene casos de prueba!, Where: connections - getTestCase},
        ErrorGetTestCases: {Type: Error,Msg: ¡Error al cargar el caso de prueba!, Where: getTestCases},
        ErrorGetTestPlan: {Type: Warning,Msg: ¡Este proyecto no tiene planes de prueba!, Where: getTestPlans},
        ErrorGetTestPlans: {Type: Error,Msg: ¡Error al cargar planes de prueba!, Where: getTestPlans},
        ErrorGetTestSuit: {Type: Warning,Msg: ¡Este plan de prueba no tiene trajes de prueba!, Where: getTestSuits},
        ErrorGetTestSuits: {Type: Error,Msg: ¡Error al cargar el traje de prueba!, Where: getTestSuits},
        ErrorGetText: {Type: Error,Msg: ¡No se puede obtener el texto del componente y/o de la página!, Where: automationFunc - getText},
        ErrorGetTextPart: {Type: Error,Msg: ¡No se puede recuperar parte del texto del componente y/o página!, Where: automationFunc - getTextPart},
        ErrorGetTitle: {Type: Error,Msg: ¡No se puede obtener el título de la página!, Where: automationFunc - GetTitle},
        ErrorGetVariables: {Type: Error,Msg: Error al obtener la masa de prueba. Compruebe si hay una variable en blanco en el caso de prueba., Where: getVariables},
        ErrorGetURL: {Type: Error,Msg: ¡No se puede obtener la URL de la página!, Where: automationFunc - GetURL},
        ErrorInform: {Type: Error,Msg: ¡Pantalla de alerta NO encontrada!, Where: automationFunc - Inform},
        ErrorIsDisplayed: {Type: Error,Msg: ¡Elemento NO ubicado o imposible de identificar si es visible!, Where: automationFunc - IsDisplayed},
        ErrorIsEnable: {Type: Error,Msg: ¡Elemento NO localizado o imposible identificar su estado!, Where: automationFunc - IsEnable},
        ErrorIsSelected: {Type: Error,Msg: ¡Elemento NO localizado o imposible identificar su estado!, Where: automationFunc - IsSelected},
        ErrorHighLight: {Type: Error,Msg: ¡No se puede resaltar el componente!, Where: automationFunc - highlight},
        ErrorInstance: {Type: Warning,Msg: ¡Esta instancia no tiene proyectos!, Where: getProjects},
        ErrorLineEmpty: {Type: Error,Msg: ¡Hay una celda en blanco en el caso de prueba!, Where: sliceDatas},
        ErrorLoadConfigs: {Type: Error,Msg: ¡Error al cargar la configuración!, Where: loadConfigs},
        ErrorLoadSwagger: {Type: Error,Msg: ¡Error al leer arrogancia!, Where: automationAux - load_swagger},
        ErrorLoadTestRun: {Type: Error,Msg: ¡Error al cargar TestRun!, Where: createTestRun},
        ErrorMain: {Type: Error,Msg: ¡Error al ejecutar Principal!, Where: automationCore - Main},
        ErrorMouseOver: {Type: Error,Msg: ¡Objeto NO encontrado en la pantalla!, Where: automationFunc - mouseOver},
        ErrorNoExecute: {Type: Error,Msg: ¡Este paso NO se ha omitido exitosamente!, Where: noExecute},
        ErrorOpenBrowser: {Type: Error,Msg: ¡Error al abrir el navegador!, Where: openBrowser},
        ErrorOpenNewTab: {Type: Error,Msg: ¡Error al abrir una nueva pestaña!, Where: automationFunc - openNewTab},
        ErrorOpenPage: {Type: Error,Msg: ¡Error al acceder a la página!, Where: automationFunc - openPage},
        ErrorPercentage: {Type: Error,Msg: ¡Error al calcular el porcentaje!, Where: automationAux - percentage},
        ErrorReadHash: {Type: Error,Msg: ¡Error al leer Hash!, Where: readHash},
        ErrorRefreshPage: {Type: Error,Msg: "¡Error al actualizar la página!", Where: RefreshPage},
        ErrorRemoveHTML: {Type: Error,Msg: ¡Error al eliminar HTML de la cadena!, Where: removeHTML},
        ErrorResolvedReference: {Type: Error,Msg: ¡Error al encontrar la referencia JSON!, Where: automationAux - resolve_refs},
        ErrorReplacePasswordEvidence: {Type: Error,Msg: "¡Error al cambiar las contraseñas con asteriscos!", Where: ReplacePasswordEvidence},
        ErrorReplacePasswordPosition: {Type: Error,Msg: "La sintaxis del paso no es correcta. Siga la siguiente sintaxis: Ingrese la contraseña 'contenido de la contraseña' en el campo 'nombre del campo'", Where: ReplacePasswordEvidence},
        ErrorRequest: {Type: Error,Msg: ¡La solicitud falló!, Where: connections - several points},
        ErrorRequestAPI: {Type: Error,Msg: ¡Error en la solicitud de API!, Where: automationFunc - request_api},
        ErrorResponseAPI: {Type: Error,Msg: ¡Error en la respuesta de la API!, Where: automationFunc - responseAPI},
        ErrorRightClick: {Type: Error,Msg: ¡Error al hacer clic derecho en el elemento!, Where: automationFunc - rightClick},
        ErrorReturnDefault: {Type: Error,Msg: "¡El enfoque no ha cambiado!", Where: returnDefault},
        ErrorReturnIframe: {Type: Error,Msg: "¡El foco no ha cambiado al iframe deseado!", Where: automationFunc - returnFrame},
        ErrorReturnWindow: {Type: Error,Msg: "¡El foco no ha cambiado a la ventana deseada!", Where: automationFunc - returnWindow},
        ErrorSaveHash: {Type: Error,Msg: ¡Error al guardar Hash!, Where: saveHash},
        ErrorSaveManualPrintScreen: {Type: Error,Msg: "¡Error al guardar la evidencia del caso de prueba manual!", Where: saveManualPrintScreen},
        ErrorSaveToken: {Type: Error,Msg: ¡No se puede guardar el token en el archivo!, Where: saveToken},
        ErrorScreenshot: {Type: Error,Msg: ¡No se puede tomar una captura de pantalla!, Where: mainFunction},
        ErrorSelectDropDownList: {Type: Error,Msg: ¡No se puede seleccionar el componente DropDownList!, Where: automationFunc - selectDropDownList},
        ErrorSaveDownloadFileLocally: {Type: Error,Msg: ¡Error al descargar archivos de casos de prueba!, Where: SaveDownloadFileLocally}, ###
        ErrorUploadFileGit: {Type: Error,Msg: ¡Error al agregar el archivo al caso de prueba!, Where: connections - UploadFileGit},
        ErrorUploadFileAmount: {Type: Error,Msg: No se encontró la cantidad correcta de archivos en la carpeta de descarga., Where: connections - UploadFileGit},
        ErrorUploadFileGitToken: {Type: Error,Msg: ¡Error al agregar el archivo Token al caso de prueba!, Where: connections - ErrorUploadFileGitToken},
        ErrorSaveFile: {Type: Error,Msg: ¡Error al guardar el archivo localmente!, Where: automationFunc - saveFile},
        ErrorScrollPage: {Type: Error,Msg: ¡Error al desplazarte por la página!, Where: ScrollPage},
        ErrorSetLanguage: {Type: Error,Msg: ¡Error al configurar el idioma!, Where: automationAux - setLanguage},
        ErrorSendRequest: {Type: Error,Msg: Error al enviar la solicitud de API., Where: connection - send_request},
        ErrorSizeName: {Type: Error,Msg: ¡El nombre del caso de prueba debe tener 103 caracteres o menos!, Where: automationAux - validateTestName},
        ErrorSliceDatas: {Type: Error,Msg: ¡Error al desglosar los datos de los pasos!, Where: connections - sliceDatas},
        ErrorSliceDataBlank: {Type: Error,Msg: Consulte en Azure. ¡Hay al menos un campo en blanco!, Where: sliceDatas},
        ErrorSpecialCharacter: {Type: Error,Msg: "El nombre del caso de prueba no debe contener ninguno de los siguientes caracteres", Where: automationAux - validateTestName},
        ErrorStartAutomation: {Type: Error,Msg: ¡Error al ejecutar los pasos de prueba!, Where: automationCore - startAutomation},
        ErrorStep: {Type: Error,Msg: ¡Error en el paso!, Where: mainFunction},
        ErrorStepFor: {Type: Error,Msg: ¡Error al ejecutar los pasos!, Where: mainFunction},
        ErrorPressButton: {Type: Error,Msg: ¡La clave ingresada no es válida!, Where: pressButton},
        ErrorReadHTMLContent: {Type: Error,Msg: Error al leer HTML, Where: automationAux - read_html_content},
        ErrorReleaseNotes: {Type: Error,Msg: Error al leer el archivo Léame y al obtener las notas de la versión., Where: automationAux - releaseNotes},
        ErrorTakePicture: {Type: Error,Msg: ¡Error al ejecutar el paso Imprimir Pantalla!, Where: automationFunc - takePicture},
        ErrorTestNameValidation: {Type: Error,Msg: ¡Error en la validación del nombre del caso de prueba!, Where: automationAux - validateTestName},
        ErrorTranslateMessage: {Type: Error,Msg: ¡Error al traducir mensajes!, Where: automationAux - translateMsg},
        ErrorUpdateStatusAutomated: {Type: Error,Msg: ¡Error al actualizar el estado del caso de prueba a automatizado en WIT!, Where: UpdateStatusAutomated},
        ErrorUpdateLabels: {Type: Error,Msg: ¡Error al actualizar las etiquetas en el caso de prueba!, Where: connections - UploadDownloadFileID},
        ErrorUploadDownloadFile: {Type: Error,Msg: ¡Error al subir el archivo!, Where: UploadDownloadFile},
        ErrorValidationAPI: {Type: Error,Msg: ¡No fue posible identificar este valor en la devolución de API!, Where: find_content_json},
        ErrorValidateData: {Type: Error,Msg: ¡Resultado obtenido diferente al resultado esperado!, Where: validateData},
        ErrorVerifyFile: {Type: Error,Msg: ¡No se pudo verificar el archivo en el directorio!, Where: verifyFile},
        ErrorWordAddInfo: {Type: Error,Msg: ¡Ocurrió un error al agregar información en Word!, Where: wordAddInfo},
        ErrorWait: {Type: Error,Msg: ¡Ocurrió un error mientras esperaba!, Where: automationFunc - wait},
        ErrorWordAddSteps: {Type: Error,Msg: ¡Ocurrió un error al agregar el paso en Word!, Where: automationAux - wordAddSteps},
        ErrorWordFindParagraph: {Type: Error,Msg: ¡No se puede encontrar el párrafo inicial!, Where: wordAddSteps},
        ErrorWordSearchText: {Type: Error,Msg: ¡Ocurrió un error al buscar el paso en Word!, Where: automationAux - wordSearchText},
        ErrorWordToPDF: {Type: Error,Msg: ¡Ocurrió un error al convertir a PDF!, Where: automationAux - wordToPDF},
        EvidenceFolder: {Type: Success,Msg: El directorio de pruebas se creó correctamente., Where: createDirectory},
        Execute: {Type: Success,Msg: ¡La aplicación se ha abierto con éxito!, Where: Execute},
        ExecuteTestCase: {Type: Success,Msg: Carga exitosa de la ejecución del caso de prueba., Where: executeTestCase},
        FindElement: {Type: Success,Msg: Encontré el componente en la pantalla., Where: automationFunc - findElement},
        FillField: {Type: Success,Msg: El campo ha sido completado exitosamente., Where: automationFunc - fillField},
        ForwardPage: {Type: Success,Msg: La página avanzó exitosamente., Where: automationFunc - forwardPage},
        GetAttribute: {Type: Success,Msg: Éxito en la obtención del atributo del elemento., Where: automationFunc - GetAttribute},
        GetQuantityElements: {Type: Success,Msg: Encontré los componentes., Where: automationFunc - getQuantityElements},
        GetSteps: {Type: Success,Msg: ¡Éxito al extraer pasos del caso de prueba!, Where: getSteps},
        GetText: {Type: Success,Msg: Éxito al obtener texto de la página., Where: automationFunc - getText},
        GetTextPart: {Type: Success,Msg: Éxito al obtener parte del texto de un componente., Where: automationFunc - getTextPart},
        GetTestCaseName: {Type: Success,Msg: Éxito al extraer el nombre del caso de prueba., Where: GetTestCaseName},
        GetTitle: {Type: Success,Msg: Éxito en la obtención del título de la página., Where: automationFunc - GetTitle},
        GetURL: {Type: Success,Msg: Éxito en la obtención de la URL de la página., Where: automationFunc - GetURL},
        GetVariables: {Type: Success,Msg: Éxito en la obtención de la masa de prueba., Where: GetVariables},
        Inform: {Type: Success,Msg: La pantalla de alerta se ha encontrado con éxito., Where: automationFunc - Inform},
        InstallNewVersion: {Type: Success,Msg: ¡Descarga completada exitosamente! - Versión, Where: automationAux - checkNewVersion},
        IsDisplayed: {Type: Success,Msg: Elemento localizado., Where: automationFunc - IsDisplayed},
        IsDisplayedNo: {Type: Success,Msg: No se encontró el elemento., Where: automationFunc - IsDisplayed},
        IsEnable: {Type: Success,Msg: Elemento localizado., Where: automationFunc - IsEnable},
        IsSelected: {Type: Success,Msg: Elemento localizado., Where: automationFunc - IsSelected},
        NoExecute: {Type: Success,Msg: Este paso se omitió con éxito., Where: noExecute},
        NoSelectDropDownList: {Type: Error,Msg: ¡No se encontraron valores coincidentes dentro de esta DropDownList!, Where: automationFunc - selectDropDownList},
        MouseOver: {Type: Success,Msg: El mouse se ha movido exitosamente., Where: automationFunc - mouseOver},
        OpenPage: {Type: Success,Msg: Acceso a la página exitosamente., Where: automationFunc - openPage},
        OpenBrowser: {Type: Success,Msg: El navegador se abrió correctamente., Where: automationFunc - openBrowser},
        OpenNewTab: {Type: Success,Msg: La pestaña se abrió correctamente., Where: automationFunc - OpenNewTab},
        Percentage: {Type: Success,Msg: Porcentaje calculado correctamente., Where: startAutomation - percentage},
        PressButton: {Type: Success,Msg: Botón presionado., Where: automationFunc - pressButton},
        ReleaseNotes: {Type: Log,Msg: Versiones de automatización, Where: automationAux - releaseNotes},
        RefreshPage: {Type: Success,Msg: Página actualizada., Where: automationFunc - RefreshPage},
        ReturnDefault: {Type: Success,Msg: El enfoque ha cambiado., Where: returnDefault},
        ReturnIframe: {Type: Success,Msg: El foco ha cambiado al iframe deseado., Where: automationFunc - returnFrame},
        ReturnWindow: {Type: Success,Msg: El foco ha cambiado a la ventana deseada., Where: automationFunc - returnWindow},
        RightClick: {Type: Success,Msg: Haga clic en el botón derecho con éxito., Where: automationFunc - rightClick},
        SaveDownloadFileLocally: {Type: Success,Msg: Los archivos del caso de prueba se han descargado correctamente., Where: SaveDownloadFileLocally}, ###
        SavingEvidence: {Type: Log,Msg: Se están generando pruebas..., Where: automationCore - startAutomation},
        SaveManualPrintScreen: {Type: Success,Msg: Éxito al guardar la evidencia de este paso., Where: saveManualPrintScreen},
        SaveToken: {Type: Success,Msg: El token se ha guardado correctamente., Where: saveToken},
        SaveFile: {Type: Success,Msg: La descarga fue exitosa., Where: automationFunc - saveFile},
        ScrollPage: {Type: Success,Msg: El comando para desplazarse por la página se ejecutó correctamente., Where: ScrollPage},
        SelectDropDownList: {Type: Success,Msg: Elemento seleccionado en DropDownList., Where: automationFunc - selectDropDownList},
        SetLanguage: {Type: Success,Msg: El idioma se ha configurado correctamente., Where: setLanguage},
        SliceDatas: {Type: Success,Msg: Éxito en el desglose de los datos masivos de prueba., Where: sliceDatas},
        StatusTestCase: {Type: Success,Msg: Caso de prueba consultado exitosamente., Where: createTestRun - TestRun},
        TakePicture: {Type: Success,Msg: PrintScreen se realizó correctamente., Where: automationFunc - takePicture},
        TestCaseFinished: {Type: Log,Msg: Caso de prueba terminado., Where: mainFunction},
        UploadDownloadFile: {Type: Success,Msg: Archivo cargado correctamente en Azure., Where: UploadDownloadFile},
        UploadDownloadFileID: {Type: Success,Msg: Descarga de ID capturada exitosamente., Where: UploadDownloadFileID},
        UploadFileGit: {Type: Success,Msg: El archivo se cargó correctamente en GitLab., Where: connections - UploadFileGit},
        UploadFileGitToken: {Type: Success,Msg: La referencia del archivo se generó correctamente en GitLab., Where: connections - UploadFileGitToken},
        UpdateLabels: {Type: Success,Msg: ¡La actualización de la etiqueta se completó correctamente!, Where: connections - UploadDownloadFileID},
        UpdateNoNewVersion: {Type: Log,Msg: No hay ninguna nueva versión disponible., Where: automationAux},
        UpdateStatusAutomated: {Type: Success,Msg: ¡Éxito en la actualización del estado en Azure!, Where: UpdateStatusAutomated},
        UpdateTryAgain: {Type: Error,Msg: Intentar otra vez, Where: AppAutomation},
        ValidateData: {Type: Success,Msg: Datos validados exitosamente., Where: automationFunc - validateData},
        ValidateDataExpected: {Type: Log,Msg: Texto esperado., Where: automationFunc - validateDataExpected},
        ValidateDataObtained: {Type: Log,Msg: Texto obtenido., Where: automationFunc - validateDataObtained},
        Wait: {Type: Success,Msg: Esperó el tiempo solicitado exitosamente., Where: automationFunc - wait},
        WarningEvidenceFolder: {Type: Warning,Msg: La evidencia NO ha sido actualizada., Where: automationCore - createDirectory},
        WarningFindElement: {Type: Warning,Msg: NO encontré el componente con el que interactuar., Where: automationFunc - findElement}
    }


#Folder list.
directories:
    {
        AutomationPath: C:\ProgramData\QA-Automation\Automation\Blue\Automation,
        ConfigFolder: Automation\configs,
        DownloadFolder: C:\ProgramData\QA-Automation-Files\Repository\Download,
        ESTFile: Automation\evidence\ETS - ,
        EvidenceFolder: C:\ProgramData\QA-Automation-Files\Repository\Evidences,
        EvidenceFolderManual: C:\ProgramData\QA-Automation-Files\Repository\Evidences\Manual,
        GitUrlReadme: https://raw.githubusercontent.com/fv112/Automation/CommandLine/README.md,
        HashFolder: C:\ProgramData\QA-Automation-Files\Repository\Hash,
        LogFolder: C:\ProgramData\QA-Automation-Files\Repository\Logs,
        SwaggerFolder: C:\ProgramData\QA-Automation-Files\Repository\Swagger,
        Temp: C:\ProgramData\QA-Automation-Files\Repository\Temp\,
        TestSetPath: '',
        UnavailablePrint: Unavailable.jpg,
        UpdateFolder: C:\ProgramData\QA-Automation-Files\Repository\NewVersion
    }

# List of other configurations.
otherConfigs:
    {
        API_Authorization: '',
        API_Body: '',
        API_Endpoint: '',
        API_ExtractInfo: {Type: Info,Msg: Datos relevantes para el esquema JSON extraídos y guardados como., Where: automationAux - api_check},
        API_Headers: '',
        API_NoResponseNeeded: {Type: Info,Msg: No hay devolución que validar en este paso., Where: automationAux - wordAddSteps},
        API_Params: '',
        API_Response: '',
        API_StatusCode: ,
        API_Step: False,
        AskCT: {Type: Info,Msg: "¿Ejecutar un caso de prueba aislado? Presione ENTER (predeterminado) para SÍ o presione [Y/y/S/s] = Sí o [N/n] = No: ", Where: connections - getTestCases},
        Bearer: 'rrkae8z2EMv_kfxXdCD-',
        BearerUpload: 'FUAsSU4p9GMLTVk_hLvv',
        Browser: '',
        ComputerName: '',
        ChooseBetweenAutomationCompare: {Type: Info,Msg: "Haz clic abajo en lo que quieras hacer", Where: AppAutomation},
        ChooseAutomation: {Type: Info,Msg: "Ejecutar automatización", Where: AppAutomation },
        ChooseCompare: {Type: Info,Msg: "Ejecutar comparación", Where: AppAutomation },
        ChooseTestCase: {Type: Info,Msg: "Ingrese el ID del caso de prueba:", Where: getTestCases},
        CleanConsole: {Type: Info,Msg: "Borrar consola", Where: AppAutomation},
        CloseBrowser: {Type: Success,Msg: Cierra el navegador., Where: close},
        CloseTokenMenu: {Type: Info,Msg: "AHORRAR", Where: automationAux},
        DesktopFunctions: ['Execute', 'Ejecute'],
        DisabledStep: {Type: Info,Msg: "Paso deshabilitado debido a necesidades de prueba", Where: wordAddSteps},
        DownloadingFile: {Type: Info,Msg: "Descargando archivo...", Where: automationFunc - saveFile},
        DownloadFinished: {Type: Info,Msg: "El archivo ha sido descargado", Where: automationFunc - saveFile},
        EmptySyntax: {Type: Info,Msg: "Este verbo no tiene sintaxis", Where: AppAutomation},
        EnableCookies: {Type: Info,Msg: "Habilitar cookies", Where: AppAutomation},
        ErrorJsonValidate: {Type: Error,Msg: "¡Error al validar JSON!", Where: responseAPI},
        EvidenceName: Screenshot_,
        EvidenceNameAPI: Response_,
        EvidenceExtension: .png,
        EvidenceExtensionAPI: .json,
        EvidenceWidth: Lib.Inches(6.0),
        EvidenceHeight: Lib.Inches(3.8),
        ETSName: CT,
        ETSExtension: .docx,
        Exit: {Type: Info,Msg: Cierra el menú., Where: azureConnection},
        FlagEnableCookie: '',
        GeneratingEvidence: {Type: Info,Msg: Generando archivo de evidencia..., Where: AutomationCore_Azure},
        GitLabPackage: 'https://raw.githubusercontent.com/fv112/Automation/CommandLine/exec/',
        GoBack: {Type: Info,Msg: "Para volver", Where: AppAutomation},
        GoToConsole: {Type: Info,Msg: "Consola", Where: AppAutomation},
        HomePage: 'about:blank',
        IndexError: {Type: Info,Msg: "Por favor, verifique se inseriu as informaÃ§Ãµes corretas", Where: automatizationCore},
        InformProject: {Type: Info,Msg: "Ingrese el ID del proyecto:", Where: getProjects},
        InterfaceEmptyFieds: {Type: Info,Msg: Compruebe que todos los campos estén correctamente cumplimentados., Where: AppAutomation},
        InvalidCharacter: "}}{{*@!#$%^&*<>?|:.*'\/\"",
        InvalidTokenMessage: {Type: Info,Msg: "El token registrado no es válido. Por favor, tente novamente.", Where: AppAutomation},
        JsonValidateSuccess: {Type: Success,Msg: "¡JSON ha sido validado exitosamente!", Where: find_content_json},
        JsonValidateFailed: {Type: Error,Msg: "¡Desacuerdo en la validación JSON!", Where: find_content_json},
        Language: '',
        LanguageError: {Type: Warning,Msg: ¡El idioma de su computadora debe ser -> Portugués (Brasil) o Español (España) o Inglés (EE.UU.)!, Where: main - ManualEvidence},
        Message: {Type: Info,Msg: Mensaje, Where: MDDialogAppTest},
        MsgFinishedCompare: {Type: Info,Msg: Finalizado, Where: ManualEvidence},
        MsgFinishedExecution: {Type: Info,Msg: Finalizado, Where: automationCore - main},
        NewVersionAvailable: {Type: Info,Msg: "¡Nueva versión disponible! Cuando termine, deberá ejecutar la automatización nuevamente para instalarla. ¿Desea descargar [Y/S] = SÍ o [N/n/Intro] = No?", Where: automationAux - checkNewVersion},
        NoAction: {Type: Info,Msg: "No", Where: automationCore},
        NoEvidences: {Type: Info,Msg: No hay imágenes para esta prueba o no se realizó alguna iteración., Where: connections},
        NoExecutions: {Type: Info,Msg: No hay ejecuciones para esta prueba., Where: azureConnection},
        NoStepFailed: {Type: Info,Msg: No hubo ningún paso fallido., Where: automationAux - wordAddInfo},
        NoTranslating: 'The messages were not changed. A new translation was not necessary.',
        OptionInvalid: {Type: Info,Msg: no es una opción válida., Where: connections},
        Percentage: {Type: Info,Msg: Porcentaje de automatización ejecutada., Where: startAutomation},
        ProjectList: {Type: Info,Msg: "Lista de proyectos:", Where: connections},
        RequestOK: {Type: Info,Msg: ¡Solicitud realizada exitosamente!, Where: connections},
        RunAgain: {Type: Info,Msg: Ejecute la automatización nuevamente., Where: getProjects},
        SaveEvidenceMsg: {Type: Info,Msg: "¿Quiere guardar la evidencia? Presione ENTER (predeterminado) para NO o [Y/y/Y/s] para SÍ o [N/n] para NO:", Where: automationCore - main},
        StatusIDTestCase: {Type: Info,Msg: ID de punto del caso de prueba consultado correctamente., Where: connections},
        StatusTestCase: {Type: Info,Msg: Caso de prueba consultado exitosamente., Where: connections},
        SaveToken: {Type: Info,Msg: "GUARDAR FICHA", Where: automationAux},
        Step: {Type: Info,Msg: PASO, Where: automationCore - Step},
        StepName: Step,
        StepWithBug: {Type: Info,Msg: ¡Error encontrado en este paso!, Where: automationAux - wordAddSteps},
        StepWithPrevBug: {Type: Info,Msg: ¡Error encontrado en un paso anterior!, Where: automationAux - wordAddSteps},
        Summary: {Type: Info,Msg: Este caso de prueba no tiene ninguna información adicional., Where: automationCore},
        TestCaseList: {Type: Info,Msg: "Lista de casos de prueba", Where: connections},
        TestPlanList: {Type: Info,Msg: "Lista de planes de prueba", Where: connections},
        TestSuitList: {Type: Info,Msg: "Lista de conjuntos de pruebas", Where: connections},
        TimeoutSession: '1',
        TranslateMessage: 'Messages translated with success!',
        Translating: 'Please wait, the translation is running. It could take some minutes...',
        UpdateButtonNo: {Type: Info,Msg: "No", Where: AppAutomation},
        UpdateButtonYes: {Type: Info,Msg: "Sí", Where: AppAutomation},
        Verb: {Type: Info,Msg: VERBO, Where: automationCore},
        WaitTranslate: {Type: Info,Msg: Espere por favor. El mensaje está siendo traducido. Esto puede tardar unos minutos., Where: automationAux - translateMsg}
    }