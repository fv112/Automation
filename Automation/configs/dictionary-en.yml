# Verbs list.
verbs:
    {
        # Portuguese.
        # Spanish (with _ before is the same as Portuguese).
        # English (with __ before is the same as Portuguese).
        Abrir: {Language: Portuguese, Function: Func.Main.openNewTab, Phrase: "Abre uma nova tab.", Syntax: "Abrir nova aba."},
        Abrir_: { Language: Spanish, Function: Func.Main.openNewTab, Phrase: "Abrir nueva pestaña .", Syntax: "Abrir pestaña nueva" },
        Open: {Language: English, Function: Func.Main.openNewTab, Phrase: "Open new tab.", Syntax: "Open new tab."},

        Acessar: {Language: Portuguese, Function: Func.Main.openPage, Phrase: "Acessa uma página web.", Syntax: "Acessar o site \"<caminho do site>\""},
        Acceder: {Language: Spanish, Function: Func.Main.openPage, Phrase: "Acceder a la dirección de una página.", Syntax: "Acceder al sitio \"<ruta del sitio>\""},
        Access: {Language: English, Function: Func.Main.openPage, Phrase: " Access a page address.", Syntax: "Access the site \"<site path>\" "},

        Aguardar: {Language: Portuguese, Function: Func.Main.wait, Phrase: "Aguarda um tempo para executar o próximo passo.", Syntax: "Aguardar \"<Tempo em segundos>\" segundos" },
        Esperar: {Language: Spanish, Function: Func.Main.wait, Phrase: "Espere el tiempo para ejecutar el siguiente paso.", Syntax: "Esperar \"<Tiempo en segundos>\" segundos"},
        Wait: {Language: English, Function: Func.Main.wait, Phrase: "Wait time to execute next step.", Syntax: "Wait\"<Time in seconds>\"seconds"},

        Alterar: {Language: Portuguese, Function: Func.Main.alter, Phrase: "Alterna entre duas janelas web e/ou abas.", Syntax: " Alterar para nova janela \n Alterar para a aba \"<nome da aba>\"."},
        Alternar: {Language: Portuguese, Function: Func.Main.alter, Phrase: "Alterna entre duas janelas web e/ou abas.", Syntax: " Alterar para nova janela \n Alterar para a aba \"<nome da aba>\""},
        Cambiar: {Language: Spanish, Function: Func.Main.alter, Phrase: "Alternativa en dos ventana Web y/o pestañas.", Syntax: " Cambiar para la ventana \n Cambiar para la \"<nombre de la pestaña>\"."},
        Switch: {Language: English, Function: Func.Main.alter, Phrase: "Altern in two web windows and/or tabs.", Syntax: " Switch to the window. \n Switch to the \"<tab name>\""},

        Arrastar: {Language: Portuguese, Function: Func.Main.dragDrop, Phrase: "Clicar e arrastar o elemento para a posição X,Y.", Syntax: "Arrastar o \"<componente>\", para a posição \"<pixel da posição x>\" :\"<pixel da posição y>\""},
        Arrastar_: {Language: Spanish, Function: Func.Main.dragDrop, Phrase: "Haga clic y arrastre el elemento a la posición X,Y", Syntax: "Arrastar el \"<componente>\" a la \"<píxel de la posición x>\" :\"<píxel de la posición y>\" "},
        Drag: {Language: English, Function: Func.Main.dragDrop, Phrase: "Click and drag the element to the X,Y position.", Syntax: "Drag the \"<component>\" to the \"<pixel x position>\" :\"<pixel position>\" "},

        Atualizar: {Language: Portuguese, Function: Func.Main.refreshPage, Phrase: "Recarrega a página.", Syntax: "Atualizar página"},
        Actualizar: {Language: Spanish, Function: Func.Main.refreshPage, Phrase: "Recargar la página.", Syntax: "Actualizar página"},
        Refresh: {Language: English, Function: Func.Main.refreshPage, Phrase: "Reload the page.", Syntax: "Refresh page"},

        Avançar: {Language: Portuguese, Function: Func.Main.forwardPage, Phrase: "Avança para a próxima página no histórico do browser.", Syntax: "Avançar página"},
        Avanzar: {Language: Spanish, Function: Func.Main.forwardPage, Phrase: "Avanza un paso en el historial del navegador.", Syntax: "Avanzar la página"},
        Forward: {Language: English, Function: Func.Main.forwardPage, Phrase: "Goes one step forward in the browser history.", Syntax: "Forward page"},

        Clicar: {Language: Portuguese, Function: Func.Main.click, Phrase: "Clica em um componente.", Syntax: "Clicar no componente \"<Nome do componente>\" "},
        Clicar_: {Language: Spanish, Function: Func.Main.click, Phrase: "Haga click en un componente.", Syntax: "Clicar en el componente \"<Nombre del componente>\" "},
        Click: {Language: English, Function: Func.Main.click, Phrase: "Click in a component.", Syntax: "Click on the component \"<Name of the component>\" "},

        Duplo: {Language: Portuguese, Function: Func.Main.doubleClick, Phrase: "Duplo clique em um componente.", Syntax: "Duplo clique no componente \"<Nome do componente>\" "},
        DobleClic: {Language: Spanish, Function: Func.Main.doubleClick, Phrase: "Haga doble click en un componente.", Syntax: "DobleClic en el componente \"<Nombre del componente>\" "},
        Double: {Language: English, Function: Func.Main.doubleClick, Phrase: "Double click in a component.", Syntax: "Double click on the component \"<Name of the component>\" "},

        Execute: {Language: Portuguese, Function: Func.Main.execute, Phrase: "Executa um aplicativo.", Syntax: "Execute o aplicativo \"<Caminho do aplicativo com o nome do executável>\"."},
        Ejecute: {Language: Spanish, Function: Func.Main.execute, Phrase: "Ejecutar una aplicación", Sintaxis: "Ejecutar aplicación \"<Ruta de la aplicación con nombre ejecutable>\"."},
        Execute_: {Language: English, Function: Func.Main.execute, Phrase: "Run an application.", Syntax: "Run application \"<Application path with executable name>\"."},

        Fechar: {Language: Portuguese, Function: Func.Main.close, Phrase: "Fechar.", Syntax: " Fechar janela \nFechar o \"browser\" -> fecha o browser "},
        Cerrar: {Language: Spanish, Function: Func.Main.close, Phrase: "Cerrar.", Syntax: "Cerrar ventana \nCerrar\" navegador\" -> cerrar el navegador"},
        Close: {Language: English, Function: Func.Main.close, Phrase: "Close.", Syntax: "Close window \nClose \"browser\" -> close the browser"},

        Informar: {Language: Portuguese, Function: Func.Main.inform, Phrase: "Escolhe uma opção no alerta do browser.", Syntax: "Informar o alerta com o botão \"OK\" o texto \"<Texto que deseja validar>\" \nInformar o alerta com o botão \"Cancelar\" o texto \"<Texto que deseja validar>\" \nInformar o texto \"<Texto desejado>\" e validar o texto \"<Texto que deseja validar>\""},
        Elegir: {Language: Spanish, Function: Func.Main.inform, Phrase: "Elija una opción en una alerta del navegador.", Syntax: "Eligir la alerta con el botón \"Aceptar\" y comprobar el \"<Texto que desea validar>\" \nEligir la alerta con el botón \"Cancelar\" y comprobar el \"<Texto que desea validar>\" \nEligir el texto \"<Texto deseado>\" y comprobar el texto \"<Texto que desea validar>\" "},
        Inform: {Language: English, Function: Func.Main.inform, Phrase: "Inform a option in a browser alert.", Syntax: "Inform the alert with the \"OK\" button the text \"<Text you want to validate>\" \nInform the alert with the \"Cancel\" button the text \"<Text you want to validate>\" \nInform the text \"<Any text>\" and validate the text \"<Text you want to validate>\""},

        Mover: {Language: Portuguese, Function: Func.Main.mouseOver, Phrase: "Movimenta o mouse sobre um componente.", Syntax: "Mover o mouse sobre o \"<Nome do componente>\""},
        Mover_: {Language: Spanish, Function: Func.Main.mouseOver, Phrase: "Mueve el mouse sobre un elemento.", Syntax: "Mover el mouse sobre \"<Nombre del componente>\" "},
        Move: {Language: English, Function: Func.Main.mouseOver, Phrase: "Move the mouse over an element.", Syntax: "Move the mouse over the \"<Name of the component>\" "},

        Navegar: {Language: Portuguese, Function: Func.Main.openBrowser, Phrase: "Abri o browser = CHROME, GOOGLE, GOOGLE CHROME / MOZILLA, FIREFOX / IE, INTERNET, INTERNET EXPLORER (IE 11) / LEGACY, ANTIGO (Edge Legacy) / EDGE (Edge Novo).", Syntax: "Navegar no \"<Nome do navegador>\""},
        Navegar_: {Language: Spanish, Function: Func.Main.openBrowser, Phrase: "Abra el navegador  = CHROME, GOOGLE, GOOGLE CHROME / MOZILLA, FIREFOX / IE, INTERNET, INTERNET EXPLORER (IE 11) / LEGACY, ANTIGO (Edge Legacy) / EDGE (Edge Nuevo)."},
        Navegate: {Language: English, Function: Func.Main.openBrowser, Phrase: "Open the browser = CHROME, GOOGLE, GOOGLE CHROME / MOZILLA, FIREFOX / IE, INTERNET, INTERNET EXPLORER (IE 11) / LEGACY, ANCIENT (Edge Legacy) / EDGE (New Edge).", Syntax: "Browse \"<Browser name>\" "},

        NoExecute: {Language: Portuguese, Function: Func.Main.noExecute, Phrase: "Não executa o passo que começar com a palavra No ou Não.", Syntax: "Comando interno. Não utilizar nos passos."},
        NoExecute_: {Language: Spanish, Function: Func.Main.noExecute, Phrase: "No ejecute el paso que comienza con la palabra No o Não. Siempre en una variable."},
        NoExecute__: {Language: English, Function: Func.Main.noExecute, Phrase: "Do not execute the step that starts with the word No or Não.", Syntax: "Internal command. Do not use in steps."},

        Preencher: {Language: Portuguese, Function: Func.Main.fillField, Phrase: "Digita um texto.", Syntax: " Preencher o \"<Componente>\" com o texto \"<Texto do componente>\" \n Preencher o \"<Componente>\" como \"vazio\""},
        Llenar: {Language: Spanish, Function: Func.Main.fillField, Phrase: "Escribe un texto.", Syntax: " Llenar el \"<Componente>\" con \"<Texto del componente>\" \n Llenar el \"<Componente>\" con \"vacío\" "},
        Fill: {Language: English, Function: Func.Main.fillField, Phrase: "Type a text.", Syntax: " Fill in the \"<Component>\" with the text \"<Text of the component>\" \n Fill in the \"<Component>\" with \"empty\""},

        Pressionar: {Language: Portuguese, Function: Func.Main.rightClick, Phrase: "Clique com o botão direito do mouse sobre um componente.", Syntax: "Pressionar no componente \"<Componente>\""},
        Presionar: {Language: Spanish, Function: Func.Main.rightClick, Phrase: "Click derecho del mouse en el componente.", Syntax: "Presionar el \"<Componente>\""},
        Right: {Language: English, Function: Func.Main.rightClick, Phrase: "Right click of the mouse on the component .", Syntax: "Press on the \"<Component>\""},

        Retornar: {Language: Portuguese, Function: Func.Main.returnDefault, Phrase: "Retorna para a janela principal.", Syntax: "Retornar"},
        Retornar_: {Language: Spanish, Function: Func.Main.returnDefault, Phrase: "Regrese a la pantalla principal del navegador.", Syntax: "Retornar"},
        Return: {Language: English, Function: Func.Main.returnDefault, Phrase: "Return to the main browser window.", Syntax: "Return"},

        Rolar: {Language: Portuguese, Function: Func.Main.scrollPage, Phrase: "Navega no eixo y da página.", Syntax: "Rolar a página \"<Quantidade de pixels>\" pixels"},
        Desplazar: {Language: Spanish, Function: Func.Main.scrollPage, Phrase: "Desplazarse por la página en el eje Y.", Syntax: "Desplazar la página \"<Número de píxeles>\"vpíxeles"},
        Scroll: {Language: English, Function: Func.Main.scrollPage, Phrase: "Scroll the page on the Y axis.", Syntax: "Scroll the page \"<Number of pixels>\" pixels"},

        Salvar: {Language: Portuguese, Function: Func.Main.saveFile, Phrase: "Salva o arquivo localmente.", Syntax: "Salvar"},
        Guardar: {Language: Spanish, Function: Func.Main.saveFile, Phrase: "Guarde el archive localmente.", Syntax: "Guardar"},
        Save: {Language: English, Function: Func.Main.saveFile, Phrase: "Save the file locally.", Syntax: "Save"},

        Segurar: {Language: Portuguese, Function: Func.Main.dragDropToElement, Phrase: "Clica e arrasta um componente até outro componente.", Syntax: "Segurar o componente \"<Nome do componente de origem>\" para o componente \"<Nome do componente de destino>\""},
        Sostener: {Language: Spanish, Function: Func.Main.dragDropToElement, Phrase: "Haga clic y arrastre un componente a otro componente", Syntax: "Sostener el componente\"<Nombre del componente de origen>\" al componente \"< Nombre del componente de destino>\" "},
        Hold: {Language: English, Function: Func.Main.dragDropToElement, Phrase: "Click and drag a component to another component.", Syntax: "Hold the component \"<Name of the source component>\" to the component \"< Target component name>\" "},

        Selecionar: {Language: Portuguese, Function: Func.Main.selectDropDownList, Phrase: "Selecionar um item na dropdownlist.", Syntax: "Selecionar no componente \"<Nome do componente>\" a opção \"<Item dentro do componente>\""},
        Selecionar_: {Language: Spanish, Function: Func.Main.selectDropDownList, Phrase: "Seleccione un elemento de una lista desplegable.", Syntax: "Seleccione en el componente\"<Nombre del componente>\" la opción \"<Elemento dentro del componente>\" "},
        Select: {Language: English, Function: Func.Main.selectDropDownList, Phrase: "Select an item in a dropdownlist.", Syntax: "Select in the component \"<Name of the component>\" the option \"<Item within the component>\" "},

        Teclar: {Language: Portuguese, Function: Func.Main.pressButton, Phrase: "Tecla um botão específico do teclado (Exemplo: CTRL, ALT, RETURN, UP, DOWN, LEFT, RIGHT, TAB, PAGE UP, PAGE DOWN, ESC, DELETE, BACKSPACE).", Syntax: " Teclar \"<Nome da tecla>\" \n Teclar \"<Nome da tecla + Nome da tecla 2>\" -> Exemplo: Teclar \"Ctrl + v\" \n Teclar \"<Nome da tecla>\" \"<Número de vezes>\" vezes."},
        Teclar_: {Language: Spanish, Function: Func.Main.pressButton, Phrase: "Tecla en un botón específico en el teclado (Ejemplo: CTRL, ALT, RETURN, UP, DOWN, LEFT, RIGHT, TAB, PAGE UP, PAGE DOWN, ESC, DELETE, BACKSPACE).", Syntax: " Teclar \"<Nombre de la tecla>\" \n Teclar \"<Nombre de la tecla + Nombre de la tecla 2>\" -> Ejemplo: Teclar \"Ctrl + v\" \n Teclar  \"<Nombre de la tecla>\" \"<Número de veces>\" veces"},
        Press: {Language: English, Function: Func.Main.pressButton, Phrase: "Type an especific button in keyboard (Example: CTRL, ALT, RETURN, UP, DOWN, LEFT, RIGHT, TAB, PAGE UP, PAGE DOWN, ESC, DELETE, BACKSPACE). ", Syntax: " Press \"<Key name>\" \n Press \"<Key name + Key name 2>\" -> Sample: Press \"Ctrl + v\" \n Press \"<Key name>\" the \"<Number of times>\" times."},

        Validar: {Language: Portuguese, Function: Func.Main.validateData, Phrase: "Valida o conteúdo de um componente com o um texto informado.", Syntax: " Validar no componente \"<Componente>\" o texto \"<Texto que deve validar>\" \n Validar no componente \"<Componente>\" está \"(.)True\" \n Validar no componente \"<Componente>\" está \"(?)\" ativo \n Validar se a URL é igual a \"(url)<Caminho da URL>\" \n Validar se o título da janela é igual a \"(title)<Título da janela>\" \n Validar se o atributo do componente é igual a \"(#value)<Atributo do componente>\" \n Validar se o título do componente é igual a \"(#title)<Título do componente>\" \n Validar se o href do componente é igual a \"(#href)<HREF do componente>\"\n Validar se componente existe \"* <Componente>\""},
        Validar_: {Language: Spanish, Function: Func.Main.validateData, Phrase: "Obtenga un texto componente y compárelo con el esperado.", Syntax: " Validar en el componente\"<Componente>\" el texto \"<Texto que debe validar>\" \n Validar en el componente\"<Componente>\" es \"(.)Verdadero\ \n Validar en el componente \"<Componente>\" es \"(?)\" activo \n Validar si la URL es igual a \"(url)<Ruta URL>\"\ n Validar si el título de la ventana es igual a \"(título)<Título de la ventana>\" \n Validar si el atributo del componente es igual a \"(# valor)<Atributo del componente>\" \n Validar si el título del componente es igual a \"(# título)<Título del componente>\" \n Validar si el href del componente es igual a \"(# href)<Componente HREF>\" \n Validar si el componente existe \"* <Componente>\""},
        Validate: {Language: English, Function: Func.Main.validateData, Phrase: "Get a component text and compare with expected.", Syntax: " Validate in the component \"<Component>\" the text \"<Text that must validate>\" \n Validate on component \"<Component>\" is \"(.)True\" \n Validate on component \"<Component>\" is \"(?)\"active\" \n Validate if the URL is equal to \"(url)<URL Path>\" \n Validate if the window title is equal to \"(title)<Window title>\" \n Validate if the component attribute is equal to \"(# value)<Attribute of the component>\" \n Validate if the component's title is equal to \"(# title)<Component's title>\" \n Validate if the component's href is equal to \"(# href)<Component HREF>\" \n Validate if the component exist \"* <Component>\""},

        Voltar: {Language: Portuguese, Function: Func.Main.backPage, Phrase: "Retorna uma página no histórico do browser.", Syntax: "Voltar página"},
        Retroceder: {Language: Spanish, Function: Func.Main.backPage, Phrase: "Retrocede un paso en el historial del navegador.", Syntax: "Retroceder"},
        Back: {Language: English, Function: Func.Main.backPage, Phrase: "Goes one step backward in the browser history.", Syntax: "Back"}
    }

#List to search the elements attributes to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForAttribute:
    {
        buscarPorID: id,
        buscarPorNome: name,
        buscarPorClass: class,
        buscarPorHREF: a,
        buscarPorSize: size
    }
#List to search the elements to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForComponent:
    {
        buscarPorDiv: div,
        buscarPorTD: td,
        buscarPorTR: tr,
        buscarPorSpan: span
    }

#List of logs.
logs:
    {
        AccessAzure: {Type: Success,Msg: Access to Azure DevOps successfully completed., Where: accessAzure},
        OpenPage: {Type: Success,Msg: Access to the page was successful., Where: openPage},
        ActionStart: {Type: Log,Msg: Start of the automation execution., Where: createLog},
        AlterIframe: {Type: Success,Msg: The focus has changed to the IFRAME., Where: alterFrame},
        AlterWindow: {Type: Success,Msg: The screen focus has changed., Where: alterWindow},
        AttachmentList: {Type: Sucesso,Msg: Success reading the manual test case attachment., Where: attachmentList},
        BackPage: {Type: Success,Msg: Success on returning to the page., Where: BackPage},
        DragDrop: {Type: Success,Msg: The component was successfully dragged., Where: dragDrop},
        CheckDownloadFile: {Type: Success,Msg: Check if the file "Baseline" and "New" are already in Workitem!, Where: CheckDownloadFile},
        Click: {Type: Success,Msg: Click done successfully., Where: click},
        ConfigureSavePath: {Type: Success,Msg: Success configuring the download directory., Where: _configureSavePath},
        ConvertPDF: {Type: Success,Msg: EST to PDF were created., Where: mainFunction},
        CloseBrowser: {Type: Success,Msg: The browser was successfully closed., Where: close},
        CloseWindow: {Type: Success,Msg: The window was successfully closed., Where: close},
        CompareFile: {Type: Success,Msg: The file was successfully matched., Where: compareBeyondCompare},
        DeleteDownloadFile: {Type: Success,Msg: The downloaded file was successfully deleted., Where: DeleteDownloadFile},
        DeleteFile: {Type: Log,Msg: deleted the file, Where: createDirectory},
        DeleteFolder: {Type: Log,Msg: Deleted the directory, Where: createDirectory},
        DoubleClick: {Type: Success,Msg: Double click successfully performed., Where: doubleClick},
        DragDropToElement: {Type: Success,Msg: It was possible to hold and drag the component to another component successfully., Where: dragDropToElement},
        ErrorAccessAzure: {Type: Error,Msg: Failed to access Azure DevOps. Check your token!, Where: accessAzure},
        ErrorAddlog: {Type: Error,Msg: Error updating log!, Where: addlog},
        ErrorAlter: {Type: Error,Msg: Could not change focus, Where: alter},
        ErrorAlterIframe: {Type: Error,Msg: The focus has not changed to the IFRAME, Where: alterFrame},
        ErrorAlterWindow: {Type: Error,Msg: The focus has not been changed from the screen!, Where: alterWindow},
        ErrorAttachmentList: {Type: Error,Msg: Error reading manual test case attachment!, Where: attachmentList},
        ErrorBackPage: {Type: Error,Msg: Failed to return to page!, Where: BackPage},
        ErrorCheckDownloadFile: {Type: Error,Msg: Error checking if download file is already in Workitem!, Where: CheckDownloadFile},
        ErrorClick: {Type: Error,Msg: Error clicking on element!, Where: click},
        ErrorClose: {Type: Error,Msg: Error closing!, Where: close},
        ErrorConfigureLanguage: {Type: Error,Msg: There was an error setting the language!, Where: configureLanguage},
        ErrorConfigureSavePath: {Type: Error,Msg: Error configuring download directory!, Where: _configureSavePath},
        ErrorConnection: {Type: Error,Msg: This is not a failure of automation. Azure is not responding. Please check your connection and try again later!, Where: azureConnection},
        ErrorConvertPDF: {Type: Error,Msg: Could not convert ETS to PDF!, Where: mainFunction},
        ErrorCompareFile: {Type: Error,Msg: Could not open Beyond Compare!, Where: compareBeyondCompare},
        ErrorCore: {Type: Error,Msg: There was an error in the application!, Where: mainFunction},
        ErrorCreateDirectory: {Type: Error,Msg: There was an error creating the directory!, Where: createDirectory},
        ErrorCreatelog: {Type: Error,Msg: Error creating log!, Where: createlog},
        ErrorDeleteDirectory: {Type: Error,Msg: An error occurred while deleting the directory!, Where: deleteDirectory},
        ErrorDeleteDownloadFile: {Type: Error,Msg: Error deleting downloaded file!, Where: DeleteDownloadFile},
        ErrorDeleteFiles: {Type: Error,Msg: Error deleting files!, Where: deleteFiles},
        ErrorDoubleClick: {Type: Error,Msg: Error in double clicking on element!, Where: doubleClick},
        ErrorDownload: {Type: Warning,Msg: Could not download!, Where: startAutomation},
        ErrorDownloadAttachment: {Type: Error,Msg: Could not generate .zip file!, Where: DownloadAttachment},
        ErrorDragDrop: {Type: Error,Msg: Could not hold and drag component!, Where: dragDrop},
        ErrorDragDropToElement: {Type: Error,Msg: Could not hold and drag component to another component!, Where: DragDropToElement},
        ErrorEmptyLine: {Type: Error,Msg: There is a blank line in the test case!, Where: ErrorEmptyLine},
        ErrorEST: {Type: Error,Msg: Could not create EST!, Where: mainFunction},
        ErrorExecute: {Type: Error,Msg: Could not open the application!, Where: Execute},
        ErrorExecuteStepByStep: {Type: Error,Msg: Error executing the step by step!, Where: executeStepByStep},
        ErrorExecuteTestCase: {Type: Error,Msg: Error loading test case execution!, Where: executeTestCase},
        ErrorFillField: {Type: Error,Msg: Error filling in field!, Where: fillField},
        ErrorFindBrowser: {Type: Error,Msg: Could not find this browser installed on the machine!, Where: takePicture},
        ErrorForwardPage: {Type: Error,Msg: Error moving page forward!, Where: ForwardPage},
        ErrorFunctionValidateData: {Type: Error,Msg: Error executing validation!, Where: validateData},
        ErrorStartGenerateEvidence: {Type: Error,Msg: Error generating evidence!, Where: startGenerateEvidence},
        ErrorGenerateHash: {Type: Error,Msg: Error generating the Hash!, Where: generateHash},
        ErrorGetAttribute: {Type: Error,Msg: Error getting element attribute!, Where: GetAttribute},
        ErrorGetInfoRun: { Type: Error,Msg: Error reading execution comments!, Where: getInfoRun },
        ErrorGetQuantityElements: { Type: Warning,Msg: The components were NOT found., Where: getQuantityElements },
        ErrorGetRunID: {Type: Error,Msg: Error extracting Run ID!, Where: ErrorGetRunID},
        ErrorGetSteps: {Type: Error,Msg: Error extracting test case steps!, Where: GetSteps},
        ErrorGetParameters: {Type: Error,Msg: Error extracting parameters from test case!, Where: getParameters},
        ErrorGetProjects: {Type: Error,Msg: Error loading projects!, Where: getProjects},
        ErrorGetTestCase: {Type: Warning,Msg: This test suit has no test cases!, Where: getTestCase},
        ErrorGetTestCases: {Type: Error,Msg: Error loading test case!, Where: getTestCases},
        ErrorGetTestCaseRun: {Type: Error,Msg: Error extracting manual test case information!, Where: getTestCaseRun},
        ErrorGetTestCaseName: {Type: Error,Msg: Error extracting test case name., Where: GetTestCaseName},
        ErrorGetTestPlan: {Type: Warning,Msg: This project has no test plans!, Where: getTestPlans},
        ErrorGetTestPlans: {Type: Error,Msg: Error loading testplans!, Where: getTestPlans},
        ErrorGetTestSuit: {Type: Warning,Msg: This test plan does not have test suits!, Where: getTestSuits},
        ErrorGetTestSuits: {Type: Error,Msg: Error loading test suit!, Where: getTestSuits},
        ErrorGetText: {Type: Error,Msg: Could not get component and/or page text!, Where: getText},
        ErrorGetTitle: {Type: Error,Msg: Could not get page title!, Where: GetTitle},
        ErrorGetVariables: {Type: Error,Msg: Error getting test mass. Check for blank variable in test case., Where: getVariables},
        ErrorGetURL: {Type: Error,Msg: Could not get page URL!, Where: GetURL},
        ErrorInform: {Type: Error,Msg: Alert screen NOT found!, Where: Inform},
        ErrorIsDisplayed: {Type: Error,Msg: Element NOT found or impossible to identify if visible!, Where: isDisplayed},
        ErrorIsEnable: {Type: Error,Msg: Element NOT found or unable to identify its status!, Where: IsEnable},
        ErrorIsSelected: {Type: Error,Msg: Element NOT found or unable to identify its status!, Where: isSelected},
        ErrorHighLight: {Type: Error,Msg: Could not detach component!, Where: highlight},
        ErrorInstance: {Type: Warning,Msg: This instance has no projects!, Where: getProjects},
        ErrorLineEmpty: {Type: Error,Msg: There is a blank cell in the test case!, Where: sliceDatas},
        ErrorLoadConfigs: {Type: Error,Msg: Error loading settings!, Where: loadConfigs},
        ErrorLoadTestRun: {Type: Error,Msg: Error loading TestRun!, Where: createTestRun},
        ErrorMain: {Type: Error,Msg: Error running Main!, Where: main},
        ErrorMouseOver: {Type: Error,Msg: Object NOT found on screen!, Where: mouseOver},
        ErrorNoExecute: {Type: Error,Msg: This step was NOT successfully skipped!, Where: noExecute},
        ErrorOpenBrowser: {Type: Error,Msg: Error opening browser!, Where: openBrowser},
        ErrorOpenNewTab: {Type: Error,Msg: Error opening new tab!, Where: OpenNewTab},
        ErrorOpenPage: {Type: Error,Msg: Error accessing page!, Where: openPage},
        ErrorParameters: {Type: Error,Msg: Wrong syntax. Check the double quotes in, Where: getSteps},
        ErrorPercentage: {Type: Error,Msg: Error calculating percentage!, Where: percentage},
        ErrorReadHash: {Type: Error,Msg: Error reading Hash!, Where: readHash},
        ErrorRefreshPage: {Type: Error,Msg: "Error refreshing page!", Where: RefreshPage},
        ErrorRemoveHTML: {Type: Error,Msg: Error removing HTML from string!, Where: removeHTML},
        ErrorReplacePasswordEvidence: {Type: Error,Msg: "Failed to change passwords by asterisks!", Where: ReplacePasswordEvidence},
        ErrorReplacePasswordPosition: {Type: Error,Msg: "The syntax of the step is not correct. Please follow the following syntax: Type in the field 'field name' the password 'content of the password'", Where: ReplacePasswordEvidence},
        ErrorRequest: {Type: Error,Msg: Request failed!, Where: AzureConnection - General},
        ErrorRightClick: {Type: Error,Msg: Error clicking on element!, Where: rightClick},
        ErrorReturnDefault: {Type: Error,Msg: "The focus hasn't changed!", Where: returnDefault},
        ErrorReturnIframe: {Type: Error,Msg: "The focus was not changed to the desired iframe!", Where: returnFrame},
        ErrorReturnWindow: {Type: Error,Msg: "The focus has not been changed to the desired window!", Where: returnWindow},
        ErrorSaveHash: {Type: Error,Msg: Error saving Hash!, Where: saveHash},
        ErrorSaveManualPrintScreen: {Type: Error,Msg: "Failed to save evidence from manual test case!", Where: saveManualPrintScreen},
        ErrorSaveToken: {Type: Error,Msg: Could not save Token to file!, Where: saveToken},
        ErrorScreenshot: {Type: Error,Msg: Could not take screenshot!, Where: mainFunction},
        ErrorSelectDropDownList: {Type: Error,Msg: Could not select DropDownList!,Where: selectDropDownList},
        ErrorSelectCombobox: {Type: Error,Msg: Could not select combobox!, Where: selectCombobox},
        ErrorResetEdgeLegacy: {Type: Error,Msg: Error restoring Edge Legacy settings!, Where: _resetEdgeLegacy},
        ErrorSaveEvidence100files: {Type: Error,Msg: "Error saving zip file replacing 100 attached files in test case", Where: SaveEvidenceTestCase},
        ErrorSaveDownloadFileLocally: {Type: Error,Msg: Error downloading test case files!, Where: SaveDownloadFileLocally},
        ErrorSaveEvidenceRun: {Type: Error,Msg: Error saving evidence in Run!, Where: SaveEvidenceRun},
        ErrorSaveEvidenceTestCase: {Type: Error,Msg: Error updating downloaded file in test case!, Where: SaveEvidenceTestCase},
        ErrorSaveFile: {Type: Error,Msg: Error saving file locally!, Where: saveFile},
        ErrorScrollPage: {Type: Error,Msg: Error scrolling page!, Where: ScrollPage},
        ErrorSetLanguage: {Type: Error,Msg: Error setting language!, Where: setLanguage},
        ErrorSizeName: {Type: Error,Msg: The test case name must be 85 characters or less!, Where: validateTestName},
        ErrorSliceDatas: {Type: Error,Msg: Error splitting test mass data!, Where: sliceDatas},
        ErrorSliceDataBlank: {Type: Error,Msg: Check in Azure. There is at least one blank field!, Where: sliceDatas},
        ErrorSpecialCharacter: {Type: Error,Msg: "The test case name must not contain any of the following characters ", Where: validateTestName},
        ErrorStartAutomation: {Type: Error,Msg: Error running test steps!, Where: startAutomation},
        ErrorStep: {Type: Error,Msg: Step error!, Where: mainFunction},
        ErrorStepFor: {Type: Error,Msg: Error executing the steps!, Where: mainFunction},
        ErrorPressButton: {Type: Error,Msg: The key entered is invalid!, Where: pressButton},
        ErrorTakePicture: {Type: Error,Msg: Error running PrintScreen from step!, Where: takePicture},
        ErrorTestNameValidation: {Type: Error,Msg: Test case name validation failed!, Where: validateTestName},
        ErrorToken: {Type: Error,Msg: Check that the token entered in the automation has been configured with FullAccess, Where: ErrorToken},
        ErrorTranslateMessage: {Type: Error,Msg: Error when translating messages!, Where: translateMsg},
        ErrorUploadDownloadFile: {Type: Error,Msg: Error uploading file!, Where: UploadDownloadFile},
        ErrorUpdateRun: {Type: Error,Msg: Error updating Run status!, Where: updateRun},
        ErrorUpdateStatusAutomated: {Type: Error,Msg: Error updating test case status to automated in WIT!, Where: UpdateStatusAutomated},
        ErrorUpdateTestCaseRun: {Type: Error,Msg: Error updating test case status!, Where: updateTestCaseRun},
        ErrorValidateData: {Type: Error,Msg: Result obtained different from the expected result!, Where: validateData},
        ErrorVerifyBrowser: {Type: Error,Msg: Could not close browser!, Where: verifyBrowser},
        ErrorVerifyFile: {Type: Error,Msg: Failed to check file in directory!, Where: verifyFile},
        ErrorWordAddInfo: {Type: Error,Msg: There was an error adding information in Word!, Where: wordAddInfo},
        ErrorWait: {Type: Error,Msg: An error occurred in Wait!, Where: wait},
        ErrorWordAddSteps: {Type: Error,Msg: There was an error adding the step in Word!, Where: wordAddSteps},
        ErrorWordFindParagraph: {Type: Error,Msg: Could not find the starting paragraph!, Where: wordAddSteps},
        ErrorWordSeachText: {Type: Error,Msg: An error occurred while searching for the step in Word!, Where: wordSeachText},
        ErrorWordToPDF: {Type: Error,Msg: There was an error converting to PDF!, Where: wordToPDF},
        EvidenceFolder: {Type: Success,Msg: The evidence directory was successfully created., Where: createDirectory},
        Execute: {Type: Success,Msg: The app has been successfully opened!, Where: Execute},
        ExecuteTestCase: {Type: Success,Msg: Success loading test case execution., Where: executeTestCase},
        FindElement: {Type: Success,Msg: Found the component to inform., Where: findElement},
        FillField: {Type: Success,Msg: The field has been filled in successfully., Where: fillField},
        ForwardPage: {Type: Success,Msg: The page has advanced successfully., Where: ForwardPage},
        GenerateZIP: {Type: Success,Msg: "Downloading and deleting test case evidence", Where: GenerateZIP},
        GenerateZIPFile: {Type: Success,Msg: Generating .zip file, Where: _DownloadAttachment},
        GetAttribute: {Type: Success,Msg: Success getting element attribute., Where: GetAttribute},
        GetInfoRun: {Type: Success,Msg: "Execution comments read successfully", Where: getInfoRun},
        GetParameters: {Type: Success,Msg: "Success while extracting parameters from the test case", Where: getParameters},
        GetQuantityElements: { Type: Success,Msg: Found the components., Where: getQuantityElements},
        GetRunID: {Type: Success,Msg: Success extracting Run ID!, Where: GetRunID},
        GetSteps: {Type: Success,Msg: Success extracting steps from the test case!, Where: getSteps},
        GetText: {Type: Success,Msg: Success getting page text., Where: getText},
        GetTestCaseName: {Type: Success,Msg: Success extracting test case name., Where: GetTestCaseName},
        GetTestCaseRun: {Type: Success,Msg: Success extracting the information from the manual test case., Where: getTestCaseRun},
        GetTitle: {Type: Success,Msg: Success in getting the page title., Where: GetTitle},
        GetURL: {Type: Success,Msg: Success getting the page URL., Where: GetURL},
        GetVariables: {Type: Success,Msg: Success in obtaining the test mass., Where: GetVariables},
        Inform: {Type: Success,Msg: The alert screen was successfully found., Where: Inform},
        IsDisplayed: {Type: Success,Msg: Element located., Where: isDisplayed},
        IsEnable: {Type: Success,Msg: Element located., Where: IsEnable},
        IsSelected: {Type: Success,Msg: Element located., Where: isSelected},
        NoExecute: {Type: Success,Msg: This step was successfully skipped., Where: noExecute},
        MouseOver: {Type: Success,Msg: The mouse has been moved successfully., Where: mouseOver},
        OpenBrowser: {Type: Success,Msg: Browser successfully opened., Where: openBrowser},
        OpenNewTab: {Type: Success,Msg: Tab opened successfully., Where: OpenNewTab},
        Percentage: {Type: Success,Msg: Successfully calculated percentage., Where: percentage},
        PressButton: {Type: Success,Msg: Button pressed., Where: pressButton},
        RefreshPage: {Type: Success,Msg: Updated page., Where: RefreshPage},
        ResetEdgeLegacy: {Type: Success,Msg: Success restoring Edge Legacy settings., Where: _resetEdgeLegacy},
        ReturnDefault: {Type: Success,Msg: The focus has changed., Where: returnDefault},
        ReturnIframe: {Type: Success,Msg: The focus has changed to the desired iframe., Where: returnFrame},
        ReturnWindow: {Type: Success,Msg: The focus has changed to the desired window., Where: returnWindow},
        RightClick: {Type: Success,Msg: Right click successfully performed., Where: rightClick},
        SaveDownloadFileLocally: {Type: Success,Msg: The test case files were successfully downloaded., Where: SaveDownloadFileLocally},
        SaveEvidence100files: {Type: Log,Msg: There were over 100 files in the workitem. A zipped file was created and added to the test case., Where: SaveEvidenceTestCase},
        SaveEvidenceTestCase: {Type: Success,Msg: The downloaded file has been updated in the test case., Where: SaveEvidenceTestCase},
        SaveEvidenceTestCaseID: {Type: Success,Msg: Download file link created successfully., Where: SaveEvidenceTestCase},
        SaveEvidenceRun: {Type: Success,Msg: Evidence successfully attached to Run., Where: SaveEvidenceRun},
        SaveManualPrintScreen: {Type: Success,Msg: Success saving evidence for this step., Where: saveManualPrintScreen},
        SaveToken: {Type: Success,Msg: The Token was successfully saved., Where: saveToken},
        SaveFile: {Type: Success,Msg: The file has been successfully saved., Where: saveFile},
        ScrollPage: {Type: Success,Msg: The command to scroll the page was executed successfully., Where: ScrollPage},
        SelectDropDownList: {Type: Success,Msg: Item selected in the DropDownList., Where: selectDropDownList},
        SetLanguage: {Type: Success,Msg: The language has been successfully set., Where: setLanguage},
        SliceDatas: {Type: Success,Msg: Success in splitting test mass data., Where: sliceDatas},
        StatusTestCase: {Type: Success,Msg: Test case successfully queried., Where: createTestRun - TestRun},
        TakePicture: {Type: Success,Msg: PrintScreen successfully performed., Where: takePicture},
        TestCaseFinished: {Type: Log,Msg: Test case finished., Where: mainFunction},
        UploadDownloadFile: {Type: Success,Msg: File upload to Azure was successful., Where: UploadDownloadFile},
        UploadDownloadFileID: {Type: Success,Msg: Download ID successfully captured., Where: UploadDownloadFileID },
        UpdateRun: {Type: Success,Msg: Run status has been updated successfully., Where: updateRun},
        UpdateStatusAutomated: {Type: Success,Msg: Success updating status in Azure!, Where: UpdateStatusAutomated},
        UpdateTestCaseRun: {Type: Success,Msg: Test case status updated successfully., Where: updateTestCaseRun},
        ValidateData: {Type: Success,Msg: Data successfully validated., Where: validateData},
        ValidateDataExpected: {Type: Log,Msg: Expected text., Where: validateDataExpected},
        ValidateDataObtained: {Type: Log,Msg: Text obtained., Where: validateDataObtained},
        Wait: {Type: Success,Msg: Waited the requested time successfully., Where: wait},
        WaitTime: {Type: Log,Msg: "Waiting for time to perform this action again. Seconds: ", Where: _DownloadAttachment},
        WarningEvidenceFolder: {Type: Warning,Msg: The evidence has NOT been updated., Where: createDirectory},
        WarningFindElement: {Type: Warning,Msg: Did not find the component to report., Where: findElement}
    }

#Folder list.
directories:
    {
        BeyondCompare: C:\Program Files\Beyond Compare 4\BComp.com,
        BeyondCompareSettings: Automation\configs\Settings.bcpkg,
        CompareDownloadFolder: C:\IBOPE\Repository\Automation\Compare_Download,
        ConfigFolder: Automation\configs,
        DownloadFolder: C:\IBOPE\Repository\Automation\Download,
        DownloadFolderTemp: C:\IBOPE\Repository\Automation\Download_Temp,
        ESTFile: Automation\evidence\ETS - ,
        EvidenceFolder: C:\Ibope\Repository\Automation\Evidences,
        EvidenceFolderManual: C:\Ibope\Repository\Automation\Evidences\Manual,
        HashFolder: C:\Ibope\Repository\Automation\Hash,
        LogFolder: C:\Ibope\Repository\Automation\Logs,
        ReadMeFile: C:\ibope\envAutomation\AutomacaoQA\README.md,
        TokenExpiredUrl: https://kantarware.visualstudio.com/_usersSettings/tokens,
        Temp: C:\ibope\Repository\Automation\Temp\,
        TokensFile: C:\Ibope\Repository\Automation\Tokens,
        UnavailablePrint: Unavailable.jpg,
        WebDriverChrome: Automation\drivers\Chrome32Bits.exe,
        WebDriverFirefox: Automation\drivers\Firefox64Bits.exe,
        WebDriverEdge: Automation\drivers\MSEdge64Bits.exe,
        WebDriverEdgeLegacy: Automation\drivers\MSEdgeLegacy-v16.exe,
        WebDriverIE: Automation\drivers\IE32bits.exe
    }

# List of other configurations.
otherConfigs:
    {
        Agent: 'Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion Chrome/24.0.1312.27 Safari/537.17 Mozilla/5.0 CK={} (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko',
        AskCT: {Type: Info,Msg: "Run an isolated test case? [Y/s] = Yes or [N/n] = No: ", Where: getTestSuits},
        Browser: '',
        ComputerName: '',
        ChooseOption: {Type: Info,Msg: "Enter an option:", Where: AutomationCore_Azure},
        ChooseBetweenAutomationCompare: {Type: Info,Msg: "Click below on what you want to do", Where: AppAutomation},
        ChooseAutomation: {Type: Info,Msg: "Run Automation", Where: AppAutomation },
        ChooseCompare: {Type: Info,Msg: "Run Comparison", Where: AppAutomation },
        ChooseTestCase: {Type: Info,Msg: "Run an isolated test case?", Where: AppAutomation},
        CleanConsole: {Type: Info,Msg: "Clear console", Where: AppAutomation},
        CloseBrowser: {Type: Success,Msg: Close the browser., Where: close},
        CloseTokenMenu: {Type: Info,Msg: "TO SAVE", Where: automationAux},
        DesktopFunctions: ['Execute', 'Ejecute'],
        DisabledStep: {Type: Info,Msg: "Step disabled due to test needs", Where: wordAddSteps},
        DownloadingFile: {Type: Info,Msg: "Downloading file...", Where: saveFile},
        DownloadingFileIE: {Type: Warning,Msg: It is not possible to configure the automated version of Internet Explorer 11 to perform downloads. Please use another browser., Where: openBrowser},
        DownloadFinished: {Type: Info,Msg: "The file has been downloaded", Where: saveFile},
        EmptySyntax: {Type: Info,Msg: "This verb has no syntax", Where: AppAutomation},
        EnableCookies: {Type: Info,Msg: "Enable Cookies", Where: AppAutomation},
        EvidenceName: Screenshot_,
        EvidenceExtension: .png,
        EvidenceWidth: Inches(6.0),
        EvidenceHeight: Inches(3.8),
        ETSName: CT,
        ETSExtension: .docx,
        FlagEnableCookie: '',
        GeneratingEvidence: {Type: Info,Msg: Generating evidence file..., Where: AutomationCore_Azure},
        GetParameters: {Type: Info,Msg: Error extracting parameters from test case!, Where: AutomationCore_Azure},
        GetTestSuit: {Type: Info,Msg: This test plan does not have test suits!, Where: AutomationCore_Azure},
        GoBack: {Type: Info,Msg: "To go back", Where: AppAutomation},
        GoToConsole: {Type: Info,Msg: "Console", Where: AppAutomation},
        HomePage: 'https://www.kantar.com/',
        HttpBasicAuth: '',
        IDRunInvalid: {Type: Info,Msg: ID Run not found!, Where: getTestCaseRun},
        IndexError: {Type: Info,Msg: "Please, verifique se inseriu as informaÃ§Ãµes corretas", Where: automatizationCore},
        InformTokenPart1: {Type: Info,Msg: Please enter your Azure DevOps token., Where: AutomationCore_Azure},
        InformTokenPart2: {Type: Info,Msg: To generate it access the link, Where: AutomationCore_Azure},
        InformTokenPart3: {Type: Info,Msg: "clicking the button", Where: automationAux},
        Interface: True,
        InterfaceEmptyFieds: {Type: Info,Msg: Check that all fields are properly filled in., Where: AppAutomation},
        InvalidCharacter: "}}{{*[]@!#$%^&*<>?|:.*'\/\"",
        InvalidTokenMessage: {Type: Info,Msg: "The registered token is invalid. Please, tente novamente.", Where: AppAutomation},
        Language: '',
        LanguageError: {Type: Warning,Msg: Your computer's language must be -> Portuguese (Brazil) or Spanish (Spain) or English (USA)!, Where: main - ManualEvidence},
        Message: {Type: Info,Msg: Message, Where: MDDialogAppTest},
        MsgFinishedCompare: {Type: Info,Msg: finished, Where: ManualEvidence},
        MsgFinishedEvidence: {Type: Info,Msg: finished, Where: CompareFiles},
        MsgFinishedExecution: {Type: Info,Msg: finished, Where: AutomationCore_Azure},
        NoAction: {Type: Info,Msg: "No", Where: AutomationCore_Azure},
        NoEvidences: {Type: Info,Msg: There are no images for this test or some iteration was not performed., Where: azureConnection},
        NoExecutions: {Type: Info,Msg: There are no runs for this test., Where: azureConnection},
        NoTranslating: 'The messages were not changed. A new translation was not necessary.',
        OptionInvalid: {Type: Info,Msg: is not a valid option., Where: azureConnection},
        Percentage: {Type: Info,Msg: Percentage of automation performed., Where: startAutomation},
        ProjectList: {Type: Info,Msg: "List of projects:", Where: azureConnection},
        RequestOK: {Type: Info,Msg: Request made successfully!, Where: azureConnection},
        ReplaceEvidence: False,
        RunAgain: {Type: Info,Msg: Run the automation again., Where: getProjects},
        Exit: {Type: Info,Msg: Close the menu., Where: azureConnection},
        StatusIDTestCase: {Type: Info,Msg: Point ID of the successfully queried test case., Where: azureConnection},
        StatusTestCase: {Type: Info,Msg: Test case successfully queried., Where: azureConnection},
        SaveToken: {Type: Info,Msg: "SAVE TOKEN", Where: automationAux},
        Step: {Type: Info,Msg: STEP, Where: AutomationCore_Azure},
        StepName: Step,
        StepNotFound: {Type: Info,Msg: Bug found in this step!, Where: AutomationCore_Azure},
        Summary: {Type: Info,Msg: This test case does not have any additional information., Where: AutomationCore_Azure},
        Tab1CompareButton: { Type: Info,Msg: "Run compare", Where: AppAutomation},
        Tab1CookieLabel: { Type: Info,Msg: "Save Cookies", Where: AppAutomation},
        Tab1EvidenceLabel: { Type: Info,Msg: "Evidence", Where: AppAutomation},
        Tab1ExecuteButton: { Type: Info,Msg: "Run automation", Where: AppAutomation},
        Tab1HelpTimeout: { Type: Info,Msg: "minutes", Where: AppAutomation},
        Tab1NoteExecutionLabel: { Type: Info,Msg: "Runs the automated test case", Where: AppAutomation},
        Tab1NoteCompareLabel: { Type: Info,Msg: "Compare downloaded files", Where: AppAutomation},
        Tab1NoteCookieLabel: { Type: Info,Msg: "Not implemented in Firefox and Edge Legacy", Where: AppAutomation},
        Tab1NoteIsolateLabel: { Type: Info,Msg: "Runs only one TestSuit test case", Where: AppAutomation},
        Tab1NoteEvidenceLabel: { Type: Info,Msg: "Record Evidence", Where: AppAutomation},
        Tab1Timeout: { Type: Info,Msg: "Session timeout", Where: AppAutomation},
        Tab1Title: { Type: Info,Msg: "Run and Compare", Where: AppAutomation},
        Tab2ButtonEvidence: { Type: Info,Msg: "Generate evidence", Where: AppAutomation},
        Tab2ChooseTestCase: { Type: Info,Msg: "Run an isolated test case?", Where: AppAutomation},
        Tab2RunIDLabel: { Type: Info,Msg: "ID Run", Where: AppAutomation},
        Tab2Title: { Type: Info,Msg: "Evidence Automation", Where: AppAutomation},
        Tab3Syntax: {Type: Info,Msg: "Syntax", Where: AppAutomation},
        Tab5Title: { Type: Info,Msg: "Release Notes", Where: AppAutomation},
        TabHelpExplanation: { Type: Info,Msg: "Explanation", Where: AppAutomation},
        TabHelpFunctions: { Type: Info,Msg: "Functionality", Where: AppAutomation},
        TabHelpLanguages: { Type: Info,Msg: "Languages", Where: AppAutomation},
        TabHelpVerb: { Type: Info,Msg: "Verb", Where: AppAutomation},
        TabHelpTitle: { Type: Info,Msg: "Help", Where: AppAutomation},
        TabProjectLabel: { Type: Info,Msg: "Project", Where: AppAutomation},
        TabTestCaseLabel: { Type: Info,Msg: "Test ID", Where: AppAutomation},
        TabTestPlanLabel: { Type: Info,Msg: "Test Plan", Where: AppAutomation},
        TestCaseList: {Type: Info,Msg: "List of Test Cases", Where: azureConnection},
        TestPlanList: {Type: Info,Msg: "List of Test Plans", Where: azureConnection},
        TestSuitList: {Type: Info,Msg: "Test Suite List", Where: azureConnection},
        TimeoutSession: '',
        TranslateMessage: 'Messages translated with success!',
        Translating: 'Please wait, the translation is running. It could take some minutes...',
        Token: '',
        TokenExpired: {Type: Info,Msg: "The token has expired, serÃ¡ necessÃ¡rio criar outro.", Where: getProjects},
        TokenExpiredButton: {Type: Info,Msg: "LINK TO GENERATE NEW TOKEN", Where: automationAux},
        TokenSavedSuccess: {Type: Info,Msg: "SAVED SUCCESSFULLY", Where: automationAux},
        TokenTryAgain: {Type: Info,Msg: "TRY AGAIN", Where: AppAutomation},
        Verb: {Type: Info,Msg: VERB, Where: AutomationCore_Azure}
    }