# Verbs list.
verbs:
    {
        # Portuguese.
        # Spanish (with _ after is the same as Portuguese).
        # English (with __ after is the same as Portuguese).
        Abrir: {Language: Portuguese, Function: Lib.Func.Main.openNewTab},
        Abrir_: {Language: Spanish, Function: Lib.Func.Main.openNewTab},
        Open: {Language: English, Function: Lib.Func.Main.openNewTab},

        Acessar: {Language: Portuguese, Function: Lib.Func.Main.openPage},
        Acceder: {Language: Spanish, Function: Lib.Func.Main.openPage},
        Access: {Language: English, Function: Lib.Func.Main.openPage},

        Aguardar: {Language: Portuguese, Function: Lib.Func.Main.wait},
        Esperar: {Language: Spanish, Function: Lib.Func.Main.wait},
        Wait: {Language: English, Function: Lib.Func.Main.wait},

        Alterar: {Language: Portuguese, Function: Lib.Func.Main.alter},
        Alternar: {Language: Portuguese, Function: Lib.Func.Main.alter},
        Cambiar: {Language: Spanish, Function: Lib.Func.Main.alter},
        Switch: {Language: English, Function: Lib.Func.Main.alter},

        Arrastar: {Language: Portuguese, Function: Lib.Func.Main.dragDrop},
        Arrastar_: {Language: Spanish, Function: Lib.Func.Main.dragDrop},
        Drag: {Language: English, Function: Lib.Func.Main.dragDrop},

        Atualizar: {Language: Portuguese, Function: Lib.Func.Main.refreshPage},
        Actualizar: {Language: Spanish, Function: Lib.Func.Main.refreshPage},
        Refresh: {Language: English, Function: Lib.Func.Main.refreshPage},

        Avan√ßar: {Language: Portuguese, Function: Lib.Func.Main.forwardPage},
        Avanzar: {Language: Spanish, Function: Lib.Func.Main.forwardPage},
        Forward: {Language: English, Function: Lib.Func.Main.forwardPage},

        Clicar: {Language: Portuguese, Function: Lib.Func.Main.click},
        Clicar_: {Language: Spanish, Function: Lib.Func.Main.click},
        Click: {Language: English, Function: Lib.Func.Main.click},

        Delete: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Delete_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Delete__: {Language: English, Function: Lib.Func.Main.request_api},

        Duplo: {Language: Portuguese, Function: Lib.Func.Main.doubleClick},
        DobleClic: {Language: Spanish, Function: Lib.Func.Main.doubleClick},
        Double: {Language: English, Function: Lib.Func.Main.doubleClick},

        Execute: {Language: Portuguese, Function: Lib.Func.Main.execute},
        Ejecute: {Language: Spanish, Function: Lib.Func.Main.execute},
        Execute_: {Language: English, Function: Lib.Func.Main.execute},

        Fechar: {Language: Portuguese, Function: Lib.Func.Main.close},
        Cerrar: {Language: Spanish, Function: Lib.Func.Main.close},
        Close: {Language: English, Function: Lib.Func.Main.close},

        Get: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Get_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Get__: {Language: English, Function: Lib.Func.Main.request_api},

        Informar: {Language: Portuguese, Function: Lib.Func.Main.inform},
        Informar_: {Language: Spanish, Function: Lib.Func.Main.inform},
        Inform: {Language: English, Function: Lib.Func.Main.inform},

        Mover: {Language: Portuguese, Function: Lib.Func.Main.mouseOver},
        Mover_: {Language: Spanish, Function: Lib.Func.Main.mouseOver},
        Move: {Language: English, Function: Lib.Func.Main.mouseOver},

        Navegar: {Language: Portuguese, Function: Lib.Func.Main.openBrowser},
        Navegar_: {Language: Spanish, Function: Lib.Func.Main.openBrowser},
        Navegate: {Language: English, Function: Lib.Func.Main.openBrowser},

        NoExecute: {Language: Portuguese, Function: Lib.Func.Main.noExecute},
        NoExecute_: {Language: Spanish, Function: Lib.Func.Main.noExecute},
        NoExecute__: {Language: English, Function: Lib.Func.Main.noExecute},

        Post: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Post_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Post__: {Language: English, Function: Lib.Func.Main.request_api},

        Put: {Language: Portuguese, Function: Lib.Func.Main.request_api},
        Put_: {Language: Spanish, Function: Lib.Func.Main.request_api},
        Put__: {Language: English, Function: Lib.Func.Main.request_api},

        Preencher: {Language: Portuguese, Function: Lib.Func.Main.fillField},
        Llenar: {Language: Spanish, Function: Lib.Func.Main.fillField},
        Fill: {Language: English, Function: Lib.Func.Main.fillField},

        Pressionar: {Language: Portuguese, Function: Lib.Func.Main.rightClick},
        Presionar: {Language: Spanish, Function: Lib.Func.Main.rightClick},
        Press: {Language: English, Function: Lib.Func.Main.rightClick},

        Response: {Language: Portuguese, Function: Lib.Func.Main.responseAPI},
        Response_: {Language: Spanish, Function: Lib.Func.Main.responseAPI},
        Response__: {Language: English, Function: Lib.Func.Main.responseAPI},

        Retornar: {Language: Portuguese, Function: Lib.Func.Main.returnDefault},
        Retornar_: {Language: Spanish, Function: Lib.Func.Main.returnDefault},
        Return: {Language: English, Function: Lib.Func.Main.returnDefault},

        Rolar: {Language: Portuguese, Function: Lib.Func.Main.scrollPage},
        Desplazar: {Language: Spanish, Function: Lib.Func.Main.scrollPage},
        Scroll: {Language: English, Function: Lib.Func.Main.scrollPage},

        Salvar: {Language: Portuguese, Function: Lib.Func.Main.saveFile},
        Guardar: {Language: Spanish, Function: Lib.Func.Main.saveFile},
        Save: {Language: English, Function: Lib.Func.Main.saveFile},

        Segurar: {Language: Portuguese, Function: Lib.Func.Main.dragDropToElement},
        Sostener: {Language: Spanish, Function: Lib.Func.Main.dragDropToElement},
        Hold: {Language: English, Function: Lib.Func.Main.dragDropToElement},

        Selecionar: {Language: Portuguese, Function: Lib.Func.Main.selectDropDownList},
        Selecionar_: {Language: Spanish, Function: Lib.Func.Main.selectDropDownList},
        Select: {Language: English, Function: Lib.Func.Main.selectDropDownList},

        Teclar: {Language: Portuguese, Function: Lib.Func.Main.pressButton},
        Teclar_: {Language: Spanish, Function: Lib.Func.Main.pressButton},
        Type: {Language: English, Function: Lib.Func.Main.pressButton},

        Validar: {Language: Portuguese, Function: Lib.Func.Main.validateData},
        Validar_: {Language: Spanish, Function: Lib.Func.Main.validateData},
        Validate: {Language: English, Function: Lib.Func.Main.validateData},

        Voltar: {Language: Portuguese, Function: Lib.Func.Main.backPage},
        Retroceder: {Language: Spanish, Function: Lib.Func.Main.backPage},
        Back: {Language: English, Function: Lib.Func.Main.backPage}
    }

#List to search the elements attributes to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForAttribute:
    {
        buscarPorID: id,
        buscarPorNome: name,
        buscarPorClass: class,
        buscarPorHREF: a,
        buscarPorSize: size
    }
#List to search the elements to the GetText (Text validation).
#IMPORTANT: Add new lines if necessary.
searchForComponent:
    {
        buscarPorDiv: div,
        buscarPorTD: td,
        buscarPorTR: tr,
        buscarPorSpan: span
    }

#List of logs.
logs:
    {
        ActionStart: {Type: Log,Msg: Start of automation execution., Where: createLog},
        AlterIframe: {Type: Success,Msg: Focus has changed to the IFRAME., Where: automationFun - alterFrame},
        AlterWindow: {Type: Success,Msg: The screen focus has changed., Where: automationFun - alterWindow},
        BackPage: {Type: Success,Msg: Success returning to the page., Where: BackPage},
        CheckDownloadFile: {Type: Success,Msg: Check if the "Baseline" and "New" files are already in the Workitem!, Where: CheckDownloadFile},
        Click: {Type: Success,Msg: Click successful., Where: automationFun - click},
        ConfigureSavePath: {Type: Success,Msg: Success setting download directory., Where: _configureSavePath},
        ConvertPDF: {Type: Success,Msg: EST to PDF has been created., Where: automationCore - startAutomation},
        CouldNotCheckForUpdates: {Type: Log,Msg: Unable to verify update, Where: AppAutomation},
        CloseBrowser: {Type: Success,Msg: The browser has been closed successfully., Where: automationFunc - close},
        CloseWindow: {Type: Success,Msg: The window was closed successfully., Where: automationFunc - close},
        CompareFile: {Type: Success,Msg: The file was compared successfully., Where: compareBeyondCompare}, ###
        DeleteDownloadFile: {Type: Success,Msg: The downloaded file has been deleted successfully., Where: DeleteDownloadFile}, ###
        DeleteFile: {Type: Log,Msg: Deleted file, Where: automationAux - createDirectory},
        DeleteFolder: {Type: Log,Msg: Deleted directory, Where: automationAux - createDirectory},
        DoubleClick: {Type: Success,Msg: Double click successful., Where: doubleClick},
        DownloadPackageCompleted: {Type: Log,Msg: Package download completed successfully., Where: automationAux - checkNewVersion},
        DownloadUpdateCompletedMsg: {Type: Log,Msg: OK, Where: AppAutomation}, ###
        DownloadUpdateCompletedTitle: {Type: Log,Msg: Download successful., Where: AppAutomation}, ###
        DragDrop: {Type: Success,Msg: The component was dragged successfully., Where: automationFunc - dragDrop},
        DragDropToElement: {Type: Success,Msg: The component could be successfully grabbed and dragged onto another component., Where: dragDropToElement},
        ErrorAddLog: {Type: Error,Msg: Error generating the Log!, Where: automationAux - addlog},
        ErrorAddJsonVariation: {Type: Error,Msg: Error updating log!, Where: automationAux - add_variations},
        ErrorAlter: {Type: Error,Msg: Unable to change focus, Where: automationFunc - alter},
        ErrorAlterIframe: {Type: Error,Msg: Focus has not changed to IFRAME, Where: automationFunc - alterFrame},
        ErrorAlterWindow: {Type: Error,Msg: The focus has not changed from screen to screen!, Where: automationFunc - alterWindow},
        ErrorAttachmentList: {Type: Error,Msg: Error reading manual test case attachment!, Where: attachmentList},
        ErrorAPIMissingBody: {Type: Error,Msg: No body was provided. Required to test the schema!, Where: automationFunc - requestAPI},
        ErrorAPIMissingInfo: {Type: Error,Msg: Error executing API!, Where: automationFunc - requestAPI},
        ErrorAPICheck: {Type: Error,Msg: Schema validation error!, Where: automationAux - api_check},
        ErrorAPISchema: {Type: Error,Msg: "The step with SCHEMA must be the last step of the test case", Where: automationFunc - request_api},
        ErrorBackPage: {Type: Error,Msg: Failed to return page!, Where: automationFunc - BackPage},
        ErrorCheckDownloadFile: {Type: Error,Msg: Error checking if download file is already in Workitem!, Where: CheckDownloadFile},
        ErrorCheckNewVersion:{Type: Error,Msg: Error updating to new version, Where: automationAux - checkNewVersion},
        ErrorClick: {Type: Error,Msg: Error clicking on element!, Where: automationFunc - click},
        ErrorClose: {Type: Error,Msg: Error closing! If you want to close the browser, include the first parameter in the step., Where: automationFunc - close},
        ErrorConfigureLanguage: {Type: Error,Msg: An error occurred while setting the language!, Where: configureLanguage},
        ErrorConfigureSavePath: {Type: Error,Msg: Error setting download directory!, Where: _configureSavePath},
        ErrorConnection: {Type: Error,Msg: This is not an automation failure. GitLab is not responding. Please check your connection and try again later!, Where: connections},
        ErrorConvertPDF: {Type: Error,Msg: Unable to convert ETS to PDF!, Where: automationCore},
        ErrorCompareFile: {Type: Error,Msg: Unable to open Beyond Compare!, Where: compareBeyondCompare}, ###
        ErrorCore: {Type: Error,Msg: An error occurred in the application!, Where: mainFunction},
        ErrorCreateDirectory: {Type: Error,Msg: An error occurred while creating the directory!, Where: automationAux - createDirectory},
        ErrorCreatelog: {Type: Error,Msg: Error creating log!, Where: createlog},
        ErrorDeleteDirectory: {Type: Error,Msg: An error occurred while deleting the directory!, Where: deleteDirectory},
        ErrorDeleteDownloadFile: {Type: Error,Msg: Error deleting downloaded file!, Where: DeleteDownloadFile},
        ErrorDeleteFiles: {Type: Error,Msg: Error deleting files!, Where: automationAux - deleteFiles},
        ErrorDoubleClick: {Type: Error,Msg: Error when double clicking on the element!, Where: doubleClick},
        ErrorDownloadUpdate: {Type: Error,Msg: Failed to download., Where: automationAux - checkNewVersion},
        ErrorDownload: {Type: Warning,Msg: Unable to download!, Where: startAutomation},
        ErrorDownloadAttachment: {Type: Error,Msg: Unable to generate .zip file!, Where: automationFunc - DownloadAttachment},
        ErrorDragDrop: {Type: Error,Msg: Unable to hold and drag component!, Where: automationFunc - dragDrop},
        ErrorDragDropToElement: {Type: Error,Msg: Unable to grab and drag component to another component!, Where: automationFunc - DragDropToElement},
        ErrorEmptyLine: {Type: Error,Msg: There is a blank line in the test case!, Where: ErrorEmptyLine},
        ErrorEST: {Type: Error,Msg: Unable to create EST!, Where: mainFunction},
        ErrorExecute: {Type: Error,Msg: Unable to open application!, Where: Execute},
        ErrorExecuteStepByStep: {Type: Error,Msg: Error executing the step by step!, Where: automationCore - executeStepByStep},
        ErrorExecuteTestCase: {Type: Error,Msg: Error loading test case execution!, Where: executeTestCase},
        ErrorExtractJson: {Type: Error,Msg: Error extracting relevant data from JSON!, Where: automationAux - extract_jsonschema_relevant_data},
        ErrorFindContentAPI: {Type: Error,Msg: Error fetching content in API return!, Where: automationAux - find_content_json},
        ErrorFillField: {Type: Error,Msg: Error filling in field!, Where: automationFunc - findElement},
        ErrorFindElement: {Type: Error,Msg: Component not found for this step!, Where: automationFunc - findElement},
        ErrorFindBrowser: {Type: Error,Msg: Unable to install browser on machine!, Where: automationFunc - openBrowser},
        ErrorForwardPage: {Type: Error,Msg: Error advancing page!, Where: automationFunc - ForwardPage},
        ErrorFunctionValidateData: {Type: Error,Msg: Error executing validation!, Where: automationFunc - validateData},
        ErrorInstallNewVersion: {Type: Error,Msg: Error installing new version!, Where: automationAux},
        ErrorStartGenerateEvidence: {Type: Error,Msg: Error generating evidence!, Where: startGenerateEvidence},
        ErrorGenerateHash: {Type: Error,Msg: Error generating Hash!, Where: automationAux - generateHash},
        ErrorGetAttribute: {Type: Error,Msg: Error getting element attribute!, Where: automationFunc - GetAttribute},
        ErrorGetQuantityElements: {Type: Error,Msg: Error finding components., Where: automationFunc - getQuantityElements},
        ErrorGetSteps: {Type: Error,Msg: Error extracting test case steps!, Where: GetSteps},
        ErrorGetParameters: {Type: Error,Msg: Error extracting test case parameters!, Where: getParameters},
        ErrorGetProjects: {Type: Error,Msg: Error loading project!, Where: connections - getProjects},
        ErrorGetTestCase: {Type: Warning,Msg: This project has no test cases!, Where: connections - getTestCase},
        ErrorGetTestCases: {Type: Error,Msg: Error loading test case!, Where: getTestCases},
        ErrorGetTestPlan: {Type: Warning,Msg: This project does not have test plans!, Where: getTestPlans},
        ErrorGetTestPlans: {Type: Error,Msg: Error loading testplans!, Where: getTestPlans},
        ErrorGetTestSuit: {Type: Warning,Msg: This test plan does not have test suits!, Where: getTestSuits},
        ErrorGetTestSuits: {Type: Error,Msg: Error loading test suit!, Where: getTestSuits},
        ErrorGetText: {Type: Error,Msg: Could not get component and/or page text!, Where: automationFunc - getText},
        ErrorGetTextPart: {Type: Error,Msg: Could not get part of the text from the component and/or page!, Where: automationFunc - getTextPart},
        ErrorGetTitle: {Type: Error,Msg: Unable to get page title!, Where: automationFunc - GetTitle},
        ErrorGetVariables: {Type: Error,Msg: Error getting test mass. Check for blank variable in test case., Where: getVariables},
        ErrorGetURL: {Type: Error,Msg: Unable to get page URL!, Where: automationFunc - GetURL},
        ErrorInform: {Type: Error,Msg: The alert screen was NOT found!, Where: automationFunc - Inform},
        ErrorIsDisplayed: {Type: Error,Msg: Element NOT found or impossible to identify if it is visible!, Where: automationFunc - IsDisplayed},
        ErrorIsEnable: {Type: Error,Msg: Element NOT found or unable to identify its status!, Where: automationFunc - IsEnable},
        ErrorIsSelected: {Type: Error,Msg: Element NOT found or unable to identify its status!, Where: automationFunc - IsSelected},
        ErrorHighLight: {Type: Error,Msg: Unable to highlight component!, Where: automationFunc - highlight},
        ErrorInstance: {Type: Warning,Msg: This instance has no projects!, Where: getProjects},
        ErrorLineEmpty: {Type: Error,Msg: There is a blank cell in the test case!, Where: sliceDatas},
        ErrorLoadConfigs: {Type: Error,Msg: Error loading settings!, Where: loadConfigs},
        ErrorLoadSwagger: {Type: Error,Msg: Error reading swagger!, Where: automationAux - load_swagger},
        ErrorLoadTestRun: {Type: Error,Msg: Error loading TestRun!, Where: createTestRun},
        ErrorMain: {Type: Error,Msg: Error executing Main!, Where: automationCore - Main},
        ErrorMouseOver: {Type: Error,Msg: Object NOT found on screen!, Where: automationFunc - mouseOver},
        ErrorNoExecute: {Type: Error,Msg: This step was NOT successfully skipped!, Where: noExecute},
        ErrorOpenBrowser: {Type: Error,Msg: Error opening browser!, Where: openBrowser},
        ErrorOpenNewTab: {Type: Error,Msg: Error opening new tab!, Where: automationFunc - openNewTab},
        ErrorOpenPage: {Type: Error,Msg: Error accessing page!, Where: automationFunc - openPage},
        ###ErrorParameters: {Type: Error,Msg: Wrong syntax. Check the double quotes in, Where: getSteps},
        ErrorPercentage: {Type: Error,Msg: Error calculating percentage!, Where: automationAux - percentage},
        ErrorReadHash: {Type: Error,Msg: Error reading Hash!, Where: readHash},
        ErrorRefreshPage: {Type: Error,Msg: "Error refreshing page!", Where: RefreshPage},
        ErrorRemoveHTML: {Type: Error,Msg: Error removing HTML from string!, Where: removeHTML},
        ErrorResolvedReference: {Type: Error,Msg: Error finding JSON reference!, Where: automationAux - resolve_refs},
        ErrorReplacePasswordEvidence: {Type: Error,Msg: "Failed to change passwords with asterisks!", Where: ReplacePasswordEvidence},
        ErrorReplacePasswordPosition: {Type: Error,Msg: "The syntax of the step is not correct. Please follow the following syntax: Enter the password 'password content' in the 'field name' field", Where: ReplacePasswordEvidence},
        ErrorRequest: {Type: Error,Msg: Request failed!, Where: AzureConnection - General},
        ErrorRequestAPI: {Type: Error,Msg: API request error!, Where: automationFunc - request_api},
        ErrorResponseAPI: {Type: Error,Msg: Error in API response!, Where: automationFunc - responseAPI},
        ErrorRightClick: {Type: Error,Msg: Error when right clicking on element!, Where: automationFunc - rightClick},
        ErrorReturnDefault: {Type: Error,Msg: "Focus has not changed!", Where: returnDefault},
        ErrorReturnIframe: {Type: Error,Msg: "Focus did not change to the desired iframe!", Where: automationFunc - returnFrame},
        ErrorReturnWindow: {Type: Error,Msg: "Focus has not changed to the desired window!", Where: automationFunc - returnWindow},
        ErrorSaveHash: {Type: Error,Msg: Error saving Hash!, Where: saveHash},
        ErrorSaveManualPrintScreen: {Type: Error,Msg: "Failed to save manual test case evidence!", Where: saveManualPrintScreen},
        ErrorSaveToken: {Type: Error,Msg: Unable to save Token to file!, Where: saveToken},
        ErrorScreenshot: {Type: Error,Msg: Unable to take screenshot!, Where: mainFunction},
        ErrorSelectDropDownList: {Type: Error,Msg: Unable to select DropDownList component!, Where: automationFunc - selectDropDownList},
        ErrorSaveDownloadFileLocally: {Type: Error,Msg: Error downloading test case files!, Where: SaveDownloadFileLocally}, ###
        ErrorSaveEvidenceRun: {Type: Error,Msg: Error saving evidence in Run!, Where: SaveEvidenceRun},
        ErrorSaveEvidenceTestCase: {Type: Error,Msg: Error updating downloaded file in test case!, Where: connections - SaveEvidenceTestCase},
        ErrorSaveFile: {Type: Error,Msg: Error saving file locally!, Where: saveFile},
        ErrorScrollPage: {Type: Error,Msg: Error scrolling the page!, Where: ScrollPage},
        ErrorSetLanguage: {Type: Error,Msg: Error setting language!, Where: automationAux - setLanguage},
        ErrorSendRequest: {Type: Error,Msg: Error sending API 'request'., Where: connection - send_request},
        ErrorSizeName: {Type: Error,Msg: Test case name must be 103 characters or less!, Where: automationAux - validateTestName},
        ErrorSliceDatas: {Type: Error,Msg: Error breaking down step data!, Where: connections - sliceDatas},
        ErrorSliceDataBlank: {Type: Error,Msg: Check in Azure. There is at least one blank field!, Where: sliceDatas},
        ErrorSpecialCharacter: {Type: Error,Msg: "The test case name must not contain any of the following characters", Where: automationAux - validateTestName},
        ErrorStartAutomation: {Type: Error,Msg: Error executing test steps!, Where: automationCore - startAutomation},
        ErrorStep: {Type: Error,Msg: Misstep!, Where: mainFunction},
        ErrorStepFor: {Type: Error,Msg: Error executing steps!, Where: mainFunction},
        ErrorPressButton: {Type: Error,Msg: The key entered is invalid!, Where: pressButton},
        ErrorReadHTMLContent: {Type: Error,Msg: Error reading HTML, Where: automationAux - read_html_content},
        ErrorReleaseNotes: {Type: Error,Msg: Error reading ReadMe and getting Release Notes., Where: automationAux - releaseNotes},
        ErrorTakePicture: {Type: Error,Msg: Error executing step PrintScreen!, Where: automationFunc - takePicture},
        ErrorTestNameValidation: {Type: Error,Msg: Test case name validation failed!, Where: automationAux - validateTestName},
        ErrorTranslateMessage: {Type: Error,Msg: Error translating messages!, Where: automationAux - translateMsg},
        ErrorUpdateStatusAutomated: {Type: Error,Msg: Error updating test case status to automated in WIT!, Where: UpdateStatusAutomated},
        ErrorUpdateLabels: {Type: Error,Msg: Error updating labels in test case!, Where: connections - UploadDownloadFileID},
        ErrorUploadDownloadFile: {Type: Error,Msg: Error uploading file!, Where: UploadDownloadFile},
        ErrorValidationAPI: {Type: Error,Msg: Could not identify this value in API return!, Where: find_content_json},
        ErrorValidateData: {Type: Error,Msg: Result obtained different from the expected result!, Where: validateData},
        ErrorVerifyFile: {Type: Error,Msg: Failed to verify file in directory!, Where: verifyFile},
        ErrorWordAddInfo: {Type: Error,Msg: An error occurred while adding information in Word!, Where: wordAddInfo},
        ErrorWait: {Type: Error,Msg: An error occurred while waiting!, Where: automationFunc - wait},
        ErrorWordAddSteps: {Type: Error,Msg: An error occurred while adding the step in Word!, Where: automationAux - wordAddSteps},
        ErrorWordFindParagraph: {Type: Error,Msg: Could not find opening paragraph!, Where: wordAddSteps},
        ErrorWordSearchText: {Type: Error,Msg: An error occurred while searching for the step in Word!, Where: automationAux - wordSearchText},
        ErrorWordToPDF: {Type: Error,Msg: An error occurred while converting to PDF!, Where: automationAux - wordToPDF},
        EvidenceFolder: {Type: Success,Msg: The evidence directory has been created successfully., Where: createDirectory},
        Execute: {Type: Success,Msg: The application has been opened successfully!, Where: Execute},
        ExecuteTestCase: {Type: Success,Msg: Success loading test case execution., Where: executeTestCase},
        FindElement: {Type: Success,Msg: Found the component on the screen., Where: automationFunc - findElement},
        FillField: {Type: Success,Msg: The field was filled successfully., Where: automationFunc - fillField},
        ForwardPage: {Type: Success,Msg: The page has advanced successfully., Where: automationFunc - forwardPage},
        GetAttribute: {Type: Success,Msg: Success getting element attribute., Where: automationFunc - GetAttribute},
        GetQuantityElements: {Type: Success,Msg: Found the components., Where: automationFunc - getQuantityElements},
        GetSteps: {Type: Success,Msg: Success extracting test case steps!, Where: getSteps},
        GetText: {Type: Success,Msg: Success getting page text., Where: automationFunc - getText},
        GetTextPart: {Type: Success,Msg: Success getting part of the text of a component., Where: automationFunc - getTextPart},
        GetTestCaseName: {Type: Success,Msg: Success in extracting test case name., Where: GetTestCaseName},
        GetTitle: {Type: Success,Msg: Success in getting page title., Where: automationFunc - GetTitle},
        GetURL: {Type: Success,Msg: Success in getting page URL., Where: automationFunc - GetURL},
        GetVariables: {Type: Success,Msg: Success in obtaining the test mass., Where: GetVariables},
        Inform: {Type: Success,Msg: The alert screen was found successfully., Where: automationFunc - Inform},
        InstallNewVersion: {Type: Success,Msg: Download successful! - Version, Where: automationAux - checkNewVersion},
        IsDisplayed: {Type: Success,Msg: Element located., Where: automationFunc - IsDisplayed},
        IsDisplayedNo: {Type: Success,Msg: Element not found., Where: automationFunc - IsDisplayed},
        IsEnable: {Type: Success,Msg: Element located., Where: automationFunc - IsEnable},
        IsSelected: {Type: Success,Msg: Element located., Where: automationFunc - IsSelected},
        NoExecute: {Type: Success,Msg: This step has been successfully skipped., Where: noExecute},
        NoSelectDropDownList: {Type: Error,Msg: No matching values ‚Äã‚Äãwere found within this DropDownList!, Where: automationFunc - selectDropDownList},
        MouseOver: {Type: Success,Msg: The mouse was moved successfully., Where: automationFunc - mouseOver},
        OpenPage: {Type: Success,Msg: Page access successful., Where: automationFunc - openPage},
        OpenBrowser: {Type: Success,Msg: Browser opened successfully., Where: automationFunc - openBrowser},
        OpenNewTab: {Type: Success,Msg: Tab opened successfully., Where: automationFunc - OpenNewTab},
        Percentage: {Type: Success,Msg: Percentage calculated successfully., Where: startAutomation - percentage},
        PressButton: {Type: Success,Msg: Button pressed., Where: automationFunc - pressButton},
        ReleaseNotes: {Type: Log,Msg: Automation versions, Where: automationAux - releaseNotes},
        RefreshPage: {Type: Success,Msg: Page updated., Where: automationFunc - RefreshPage},
        ReturnDefault: {Type: Success,Msg: The focus has changed., Where: returnDefault},
        ReturnIframe: {Type: Success,Msg: Focus has changed to the desired iframe., Where: automationFunc - returnFrame},
        ReturnWindow: {Type: Success,Msg: Focus has changed to the desired window., Where: automationFunc - returnWindow},
        RightClick: {Type: Success,Msg: Right click successful., Where: automationFunc - rightClick},
        SaveDownloadFileLocally: {Type: Success,Msg: The test case files have been downloaded successfully., Where: SaveDownloadFileLocally}, ###
        SavingEvidence: {Type: Log,Msg: The evidence is being generated..., Where: automationCore - startAutomation},
        SaveEvidenceTestCase: {Type: Success,Msg: The test case reference with the file was successfully created in GitLab., Where: SaveEvidenceTestCase},
        SaveEvidenceTestCaseUpload: {Type: Success,Msg: The file upload was successfully created in GitLab., Where: SaveEvidenceTestCase},
        SaveManualPrintScreen: {Type: Success,Msg: Success saving evidence from this step., Where: saveManualPrintScreen},
        SaveToken: {Type: Success,Msg: The Token was successfully recorded., Where: saveToken},
        SaveFile: {Type: Success,Msg: The file was saved successfully., Where: saveFile}, ###
        ScrollPage: {Type: Success,Msg: The command to scroll the page was executed successfully., Where: ScrollPage},
        SelectDropDownList: {Type: Success,Msg: Item selected in DropDownList., Where: automationFunc - selectDropDownList},
        SetLanguage: {Type: Success,Msg: The language has been set successfully., Where: setLanguage},
        SliceDatas: {Type: Success,Msg: Success in splitting test mass data., Where: sliceDatas},
        StatusTestCase: {Type: Success,Msg: Test case successfully queried., Where: createTestRun - TestRun},
        TakePicture: {Type: Success,Msg: PrintScreen successfully completed., Where: automationFunc - takePicture},
        TestCaseFinished: {Type: Log,Msg: Test case completed., Where: mainFunction},
        UploadDownloadFile: {Type: Success,Msg: File upload to Azure successful., Where: UploadDownloadFile},
        UploadDownloadFileID: {Type: Success,Msg: Download ID captured successfully., Where: UploadDownloadFileID},
        UpdateLabels: {Type: Success,Msg: Label update completed successfully!, Where: connections - UploadDownloadFileID},
        UpdateNoNewVersion: {Type: Log,Msg: There is no new version available., Where: automationAux},
        UpdateStatusAutomated: {Type: Success,Msg: Success updating status in Azure!, Where: UpdateStatusAutomated},
        UpdateTryAgain: {Type: Error,Msg: Try again, Where: AppAutomation},
        ValidateData: {Type: Success,Msg: Data validated successfully., Where: automationFunc - validateData},
        ValidateDataExpected: {Type: Log,Msg: Expected text., Where: automationFunc - validateDataExpected},
        ValidateDataObtained: {Type: Log,Msg: Text obtained., Where: automationFunc - validateDataObtained},
        Wait: {Type: Success,Msg: You have successfully waited the requested time., Where: automationFunc - wait},
        WarningEvidenceFolder: {Type: Warning,Msg: The evidence has NOT been updated., Where: automationCore - createDirectory},
        WarningFindElement: {Type: Warning,Msg: Could NOT find component to interact with., Where: automationFunc - findElement}
    }


#Folder list.
directories:
    {
        AutomationPath: C:\ProgramData\QA-Automation\Automation\Blue\Automation,
        ConfigFolder: Automation\configs,
        DownloadFolder: C:\ProgramData\QA-Automation-Files\Repository\Download,
        ESTFile: Automation\evidence\ETS - ,
        EvidenceFolder: C:\ProgramData\QA-Automation-Files\Repository\Evidences,
        EvidenceFolderManual: C:\ProgramData\QA-Automation-Files\Repository\Evidences\Manual,
        GitUrlReadme: https://raw.githubusercontent.com/fv112/Automation/CommandLine/README.md,
        HashFolder: C:\ProgramData\QA-Automation-Files\Repository\Hash,
        LogFolder: C:\ProgramData\QA-Automation-Files\Repository\Logs,
        SwaggerFolder: C:\ProgramData\QA-Automation-Files\Repository\Swagger,
        Temp: C:\ProgramData\QA-Automation-Files\Repository\Temp\,
        TestSetPath: '',
        UnavailablePrint: Unavailable.jpg,
        UpdateFolder: C:\ProgramData\QA-Automation-Files\Repository\NewVersion
    }

# List of other configurations.
otherConfigs:
    {
        API_Authorization: '',
        API_Body: '',
        API_Endpoint: '',
        API_ExtractInfo: {Type: Info,Msg: "JSON Schema relevant data extracted and saved as.", Where: automationAux - api_check},
        API_Headers: '',
        API_NoResponseNeeded: {Type: Info,Msg: "There is no return to be validated at this step.", Where: automationAux - wordAddSteps},
        API_Params: '',
        API_Response: '',
        API_StatusCode: ,
        API_Step: False,
        AskCT: {Type: Info,Msg: "Run an isolated test case? Press ENTER (default) for YES or press [Y/y/S/s] = Yes or [N/n] = No:", Where: connections - getTestCases},
        Bearer: 'rrkae8z2EMv_kfxXdCD-',
        BearerUpload: 'FUAsSU4p9GMLTVk_hLvv',
        Browser: '',
        ComputerName: '',
        ChooseBetweenAutomationCompare: {Type: Info,Msg: "Click below on what you want to accomplish", Where: AppAutomation},
        ChooseAutomation: {Type: Info,Msg: "Run Automation", Where: AppAutomation },
        ChooseCompare: {Type: Info,Msg: "Run Comparison", Where: AppAutomation },
        ChooseTestCase: {Type: Info,Msg: "Enter the test case ID:", Where: getTestCases},
        CleanConsole: {Type: Info,Msg: "Clear console", Where: AppAutomation},
        CloseBrowser: {Type: Success,Msg: Close the browser., Where: close},
        CloseTokenMenu: {Type: Info,Msg: "SAVE", Where: automationAux},
        DesktopFunctions: ['Execute', 'Ejecute'],
        DisabledStep: {Type: Info,Msg: "Step disabled due to testing needs", Where: wordAddSteps},
        DownloadingFile: {Type: Info,Msg: "Downloading file...", Where: saveFile},
        DownloadFinished: {Type: Info,Msg: "The file has been downloaded", Where: saveFile},
        EmptySyntax: {Type: Info,Msg: "This verb has no syntax", Where: AppAutomation},
        EnableCookies: {Type: Info,Msg: "Enable Cookies", Where: AppAutomation},
        ErrorJsonValidate: {Type: Error,Msg: "JSON validation error!", Where: responseAPI},
        EvidenceName: Screenshot_,
        EvidenceNameAPI: Response_,
        EvidenceExtension: .png,
        EvidenceExtensionAPI: .json,
        EvidenceWidth: Lib.Inches(6.0),
        EvidenceHeight: Lib.Inches(3.8),
        ETSName: CT,
        ETSExtension: .docx,
        Exit: {Type: Info,Msg: Close the menu., Where: azureConnection},
        FlagEnableCookie: '',
        GeneratingEvidence: {Type: Info,Msg: Generating evidence file..., Where: AutomationCore_Azure},
        GitLabPackage: 'https://raw.githubusercontent.com/fv112/Automation/CommandLine/exec/',
        GoBack: {Type: Info,Msg: "To go back", Where: AppAutomation},
        GoToConsole: {Type: Info,Msg: "Console", Where: AppAutomation},
        HomePage: 'about:blank',
        IndexError: {Type: Info,Msg: "Please, verifique se inseriu as informa√É¬ß√É¬µes corretas", Where: automatizationCore},
        InformProject: {Type: Info,Msg: "Please enter the project ID:", Where: getProjects},
        InterfaceEmptyFieds: {Type: Info,Msg: Check that all fields are filled in correctly., Where: AppAutomation},
        InvalidCharacter: "}}{{*[]@!#$%^&*<>?|:.*'\/\"",
        InvalidTokenMessage: {Type: Info,Msg: "The registered token is invalid. Please, tente novamente.", Where: AppAutomation},
        JsonValidateSuccess: {Type: Success,Msg: "JSON validated successfully!", Where: find_content_json},
        JsonValidateFailed: {Type: Error,Msg: "JSON validation mismatch!", Where: find_content_json},
        Language: '',
        LanguageError: {Type: Warning,Msg: Your computer language must be -> Portuguese (Brazil) or Spanish (Spain) or English (USA)!, Where: main - ManualEvidence},
        Message: {Type: Info,Msg: Message, Where: MDDialogAppTest},
        MsgFinishedCompare: {Type: Info,Msg: Completed, Where: ManualEvidence},
        MsgFinishedExecution: {Type: Info,Msg: Completed, Where: automationCore - main},
        NewVersionAvailable: {Type: Info,Msg: "New version available! When finished, you will need to run the automation again to install. Do you want to download [Y/S] = YES or [N/n/Enter] = No", Where: automationAux - checkNewVersion},
        NoAction: {Type: Info,Msg: "No", Where: automationCore},
        NoEvidences: {Type: Info,Msg: There are no images for this test or some iteration was not executed., Where: connections},
        NoExecutions: {Type: Info,Msg: There are no runs for this test., Where: azureConnection},
        NoStepFailed: {Type: Info,Msg: There was no failed step., Where: automationAux - wordAddInfo},
        NoTranslating: 'The messages were not changed. A new translation was not necessary.',
        OptionInvalid: {Type: Info,Msg: is not a valid option., Where: connections},
        Percentage: {Type: Info,Msg: Percentage of automation executed., Where: startAutomation},
        ProjectList: {Type: Info,Msg: "Project List:", Where: connections},
        RequestOK: {Type: Info,Msg: Request completed successfully!, Where: connections},
        RunAgain: {Type: Info,Msg: Run the automation again., Where: getProjects},
        SaveEvidenceMsg: {Type: Info,Msg: "Do you want to save evidence? Press ENTER (default) for NO or [Y/y/S/s] for YES or [N/n] for NO.", Where: automationCore - main},
        StatusIDTestCase: {Type: Info,Msg: Test case point ID successfully queried., Where: connections},
        StatusTestCase: {Type: Info,Msg: Test case successfully queried., Where: connections},
        SaveToken: {Type: Info,Msg: "SAVE TOKEN", Where: automationAux},
        Step: {Type: Info,Msg: STEP, Where: automationCore - Step},
        StepName: Step,
        StepWithBug: {Type: Info,Msg: Bug found in this step!, Where: automationAux - wordAddSteps},
        StepWithPrevBug: {Type: Info,Msg: Bug found in a previous step!, Where: automationAux - wordAddSteps},
        Summary: {Type: Info,Msg: This test case does not have any additional information., Where: automationCore},
        Tab1CompareButton: {Type: Info,Msg: "Run comparison", Where: AppAutomation},
        Tab1CookieLabel: {Type: Info,Msg: "Save cookies", Where: AppAutomation},
        Tab1EvidenceLabel: {Type: Info,Msg: "Evidence", Where: AppAutomation},
        Tab1ExecuteButton: {Type: Info,Msg: "Run automation", Where: AppAutomation},
        Tab1HelpTimeout: {Type: Info,Msg: "minutes", Where: AppAutomation},
        Tab1NoteExecutionLabel: {Type: Info,Msg: "Run the automated test case", Where: AppAutomation},
        Tab1NoteCompareLabel: {Type: Info,Msg: "Perform comparison of downloaded files", Where: AppAutomation},
        Tab1NoteCookieLabel: {Type: Info,Msg: "Not implemented in Firefox and Edge Legacy", Where: AppAutomation},
        Tab1NoteIsolateLabel: {Type: Info,Msg: "Run only one test case from TestSuit", Where: AppAutomation},
        Tab1NoteEvidenceLabel: {Type: Info,Msg: "Record evidence", Where: AppAutomation},
        Tab1Timeout: {Type: Info,Msg: "Session timeout", Where: AppAutomation},
        Tab1Title: {Type: Info,Msg: "Run and Compare", Where: AppAutomation},
        Tab2ButtonEvidence: {Type: Info,Msg: "Generate evidence", Where: AppAutomation},
        Tab2ChooseTestCase: {Type: Info,Msg: "Run an isolated test case?", Where: AppAutomation},
        Tab2RunIDLabel: {Type: Info,Msg: "ID Run", Where: AppAutomation},
        Tab2Title: {Type: Info,Msg: "Evidence Automation", Where: AppAutomation},
        Tab3Syntax: {Type: Info,Msg: "Syntax", Where: AppAutomation},
        Tab5Title: {Type: Info,Msg: "Release Notes", Where: AppAutomation},
        TabHelpExplanation: {Type: Info,Msg: "Explanation", Where: AppAutomation},
        TabHelpFunctions: {Type: Info,Msg: "Functionality", Where: AppAutomation},
        TabHelpLanguages: {Type: Info,Msg: "Languages", Where: AppAutomation},
        TabHelpVerb: {Type: Info,Msg: "Verb", Where: AppAutomation},
        TabHelpTitle: {Type: Info,Msg: "Help", Where: AppAutomation},
        TabProjectLabel: {Type: Info,Msg: "Project", Where: AppAutomation},
        TabTestCaseLabel: {Type: Info,Msg: "Test ID", Where: AppAutomation},
        TabTestPlanLabel: {Type: Info,Msg: "Test Plan", Where: AppAutomation},
        TestCaseList: {Type: Info,Msg: "Test Case List", Where: connections},
        TestPlanList: {Type: Info,Msg: "Test plan list", Where: connections},
        TestSuitList: {Type: Info,Msg: "Test Suite List", Where: connections},
        TimeoutSession: '1',
        TranslateMessage: 'Messages translated with success!',
        Translating: 'Please wait, the translation is running. It could take some minutes...',
        UpdateButtonNo: {Type: Info,Msg: "No", Where: AppAutomation},
        UpdateButtonYes: {Type: Info,Msg: "Yes", Where: AppAutomation},
        Verb: {Type: Info,Msg: VERB, Where: automationCore}
    }